//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace AmadeusSdk.FlightOffersSearch
{
    #pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class Client 
    {
        internal string _baseUrl = "https://test.api.amadeus.com/v2";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Return list of Flight Offers based on posted searching criteria.</summary>
        /// <param name="x_HTTP_Method_Override">the HTTP method to apply</param>
        /// <param name="getFlightOffersBody">list of criteria to retrieve a list of flight offers</param>
        /// <returns>Successful Operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response> SearchFlightOffersAsync(string x_HTTP_Method_Override, GetFlightOffersQuery getFlightOffersBody)
        {
            return SearchFlightOffersAsync(x_HTTP_Method_Override, getFlightOffersBody, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Return list of Flight Offers based on posted searching criteria.</summary>
        /// <param name="x_HTTP_Method_Override">the HTTP method to apply</param>
        /// <param name="getFlightOffersBody">list of criteria to retrieve a list of flight offers</param>
        /// <returns>Successful Operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response> SearchFlightOffersAsync(string x_HTTP_Method_Override, GetFlightOffersQuery getFlightOffersBody, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/shopping/flight-offers");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_HTTP_Method_Override == null)
                        throw new System.ArgumentNullException("x_HTTP_Method_Override");
                    request_.Headers.TryAddWithoutValidation("X-HTTP-Method-Override", ConvertToString(x_HTTP_Method_Override, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(getFlightOffersBody, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.amadeus+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.amadeus+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error_400); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error_400>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error_400>("code    | title                                 \n------- | ------------------------------------- \n425     | INVALID DATE\n477     | INVALID FORMAT\n2668    | PARAMETER COMBINATION INVALID/RESTRICTED\n4926    | INVALID DATA RECEIVED\n10661   | MAXIMUM NUMBER OF OCCURRENCES EXCEEDED \n32171   | MANDATORY DATA MISSING\n", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error_500); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error_500>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error_500>("Unexpected error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Return list of Flight Offers based on searching criteria.</summary>
        /// <param name="originLocationCode">city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler will depart, e.g. BOS for Boston</param>
        /// <param name="destinationLocationCode">city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris</param>
        /// <param name="departureDate">the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25</param>
        /// <param name="returnDate">the date on which the traveler will depart from the destination to return to the origin. If this parameter is not specified, only one-way itineraries are found. If this parameter is specified, only round-trip itineraries are found. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-02-28</param>
        /// <param name="adults">the number of adult travelers (age 12 or older on date of departure).</param>
        /// <param name="children">the number of child travelers (older than age 2 and younger than age 12 on date of departure) who will each have their own separate seat. If specified, this number should be greater than or equal to 0</param>
        /// <param name="infants">the number of infant travelers (whose age is less or equal to 2 on date of departure). Infants travel on the lap of an adult traveler, and thus the number of infants must not exceed the number of adults. If specified, this number should be greater than or equal to 0</param>
        /// <param name="travelClass">most of the flight time should be spent in a cabin of this quality or higher. The accepted travel class is economy, premium economy, business or first class. If no travel class is specified, the search considers any travel class</param>
        /// <param name="includedAirlineCodes">This option ensures that the system will only consider these airlines. This can not be cumulated with parameter excludedAirlineCodes.
        /// 
        /// Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X</param>
        /// <param name="excludedAirlineCodes">This option ensures that the system will ignore these airlines. This can not be cumulated with parameter includedAirlineCodes.
        /// 
        /// Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X</param>
        /// <param name="nonStop">if set to true, the search will find only flights going from the origin to the destination with no stop in between</param>
        /// <param name="currencyCode">the preferred currency for the flight offers. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro</param>
        /// <param name="maxPrice">maximum price per traveler. By default, no limit is applied. If specified, the value should be a positive number with no decimals</param>
        /// <param name="max">maximum number of flight offers to return. If specified, the value should be greater than or equal to 1</param>
        /// <returns>Successful Operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response2> GetFlightOffersAsync(string originLocationCode, string destinationLocationCode, System.DateTimeOffset departureDate, System.DateTimeOffset? returnDate, int adults, int? children, int? infants, TravelClass2? travelClass, string includedAirlineCodes, string excludedAirlineCodes, bool? nonStop, string currencyCode, int? maxPrice, int? max)
        {
            return GetFlightOffersAsync(originLocationCode, destinationLocationCode, departureDate, returnDate, adults, children, infants, travelClass, includedAirlineCodes, excludedAirlineCodes, nonStop, currencyCode, maxPrice, max, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Return list of Flight Offers based on searching criteria.</summary>
        /// <param name="originLocationCode">city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler will depart, e.g. BOS for Boston</param>
        /// <param name="destinationLocationCode">city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris</param>
        /// <param name="departureDate">the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25</param>
        /// <param name="returnDate">the date on which the traveler will depart from the destination to return to the origin. If this parameter is not specified, only one-way itineraries are found. If this parameter is specified, only round-trip itineraries are found. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-02-28</param>
        /// <param name="adults">the number of adult travelers (age 12 or older on date of departure).</param>
        /// <param name="children">the number of child travelers (older than age 2 and younger than age 12 on date of departure) who will each have their own separate seat. If specified, this number should be greater than or equal to 0</param>
        /// <param name="infants">the number of infant travelers (whose age is less or equal to 2 on date of departure). Infants travel on the lap of an adult traveler, and thus the number of infants must not exceed the number of adults. If specified, this number should be greater than or equal to 0</param>
        /// <param name="travelClass">most of the flight time should be spent in a cabin of this quality or higher. The accepted travel class is economy, premium economy, business or first class. If no travel class is specified, the search considers any travel class</param>
        /// <param name="includedAirlineCodes">This option ensures that the system will only consider these airlines. This can not be cumulated with parameter excludedAirlineCodes.
        /// 
        /// Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X</param>
        /// <param name="excludedAirlineCodes">This option ensures that the system will ignore these airlines. This can not be cumulated with parameter includedAirlineCodes.
        /// 
        /// Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X</param>
        /// <param name="nonStop">if set to true, the search will find only flights going from the origin to the destination with no stop in between</param>
        /// <param name="currencyCode">the preferred currency for the flight offers. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro</param>
        /// <param name="maxPrice">maximum price per traveler. By default, no limit is applied. If specified, the value should be a positive number with no decimals</param>
        /// <param name="max">maximum number of flight offers to return. If specified, the value should be greater than or equal to 1</param>
        /// <returns>Successful Operation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response2> GetFlightOffersAsync(string originLocationCode, string destinationLocationCode, System.DateTimeOffset departureDate, System.DateTimeOffset? returnDate, int adults, int? children, int? infants, TravelClass2? travelClass, string includedAirlineCodes, string excludedAirlineCodes, bool? nonStop, string currencyCode, int? maxPrice, int? max, System.Threading.CancellationToken cancellationToken)
        {
            if (originLocationCode == null)
                throw new System.ArgumentNullException("originLocationCode");
    
            if (destinationLocationCode == null)
                throw new System.ArgumentNullException("destinationLocationCode");
    
            if (departureDate == null)
                throw new System.ArgumentNullException("departureDate");
    
            if (adults == null)
                throw new System.ArgumentNullException("adults");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/shopping/flight-offers?");
            urlBuilder_.Append("originLocationCode=").Append(System.Uri.EscapeDataString(ConvertToString(originLocationCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("destinationLocationCode=").Append(System.Uri.EscapeDataString(ConvertToString(destinationLocationCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("departureDate=").Append(System.Uri.EscapeDataString(departureDate.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (returnDate != null) 
            {
                urlBuilder_.Append("returnDate=").Append(System.Uri.EscapeDataString(returnDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("adults=").Append(System.Uri.EscapeDataString(ConvertToString(adults, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (children != null) 
            {
                urlBuilder_.Append("children=").Append(System.Uri.EscapeDataString(ConvertToString(children, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (infants != null) 
            {
                urlBuilder_.Append("infants=").Append(System.Uri.EscapeDataString(ConvertToString(infants, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (travelClass != null) 
            {
                urlBuilder_.Append("travelClass=").Append(System.Uri.EscapeDataString(ConvertToString(travelClass, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includedAirlineCodes != null) 
            {
                urlBuilder_.Append("includedAirlineCodes=").Append(System.Uri.EscapeDataString(ConvertToString(includedAirlineCodes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludedAirlineCodes != null) 
            {
                urlBuilder_.Append("excludedAirlineCodes=").Append(System.Uri.EscapeDataString(ConvertToString(excludedAirlineCodes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nonStop != null) 
            {
                urlBuilder_.Append("nonStop=").Append(System.Uri.EscapeDataString(ConvertToString(nonStop, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currencyCode != null) 
            {
                urlBuilder_.Append("currencyCode=").Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxPrice != null) 
            {
                urlBuilder_.Append("maxPrice=").Append(System.Uri.EscapeDataString(ConvertToString(maxPrice, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (max != null) 
            {
                urlBuilder_.Append("max=").Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.amadeus+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response2); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response2>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error_400); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error_400>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error_400>("code    | title                                 \n------- | ------------------------------------- \n425     | INVALID DATE\n477     | INVALID FORMAT\n2668    | PARAMETER COMBINATION INVALID/RESTRICTED\n4926    | INVALID DATA RECEIVED\n10661   | MAXIMUM NUMBER OF OCCURRENCES EXCEEDED \n32171   | MANDATORY DATA MISSING\n", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error_500); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error_500>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error_500>("Unexpected error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Error_400 
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Issue> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Issue>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Error_400 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error_400>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Error_500 
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Issue> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Issue>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Error_500 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error_500>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Issue 
    {
        /// <summary>the HTTP status code applicable to this error</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        /// <summary>an application-specific error code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Code { get; set; }
    
        /// <summary>a short summary of the error</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>explanation of the error</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        /// <summary>an object containing references to the source of the error</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Source Source { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Issue FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Issue>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Collection_Meta 
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oneWayCombinations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OneWayCombinations> OneWayCombinations { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Collection_Meta FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Collection_Meta>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Collection_Meta_Link 
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Collection_Meta_Link FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Collection_Meta_Link>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LocationEntry 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LocationEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationEntry>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AircraftEntry 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AircraftEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AircraftEntry>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CurrencyEntry 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CurrencyEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyEntry>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CarrierEntry 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CarrierEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CarrierEntry>(data);
        }
    
    }
    
    /// <summary>defining a flight segment; including both operating and marketing details when applicable</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightSegment 
    {
        [Newtonsoft.Json.JsonProperty("departure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlightEndPoint Departure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("arrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlightEndPoint Arrival { get; set; }
    
        /// <summary>providing the airline / carrier code</summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string CarrierCode { get; set; }
    
        /// <summary>the flight number as assigned by the carrier</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string Number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aircraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AircraftEquipment Aircraft { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperatingFlight Operating { get; set; }
    
        /// <summary>stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        /// <summary>information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...</summary>
        [Newtonsoft.Json.JsonProperty("stops", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FlightStop> Stops { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FlightSegment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightSegment>(data);
        }
    
    }
    
    /// <summary>departure or arrival information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OriginalFlightEndPoint 
    {
        /// <summary>[IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx)</summary>
        [Newtonsoft.Json.JsonProperty("iataCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IataCode { get; set; }
    
        /// <summary>terminal name / number</summary>
        [Newtonsoft.Json.JsonProperty("terminal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Terminal { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OriginalFlightEndPoint FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginalFlightEndPoint>(data);
        }
    
    }
    
    /// <summary>departure or arrival information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightEndPoint : OriginalFlightEndPoint
    {
        /// <summary>local date and time in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00</summary>
        [Newtonsoft.Json.JsonProperty("at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? At { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FlightEndPoint FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightEndPoint>(data);
        }
    
    }
    
    /// <summary>details of stops for direct or change of gauge flights</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OriginalFlightStop 
    {
        /// <summary>[IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx)</summary>
        [Newtonsoft.Json.JsonProperty("iataCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IataCode { get; set; }
    
        /// <summary>stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OriginalFlightStop FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginalFlightStop>(data);
        }
    
    }
    
    /// <summary>details of stops for direct or change of gauge flights</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightStop : OriginalFlightStop
    {
        /// <summary>arrival at the stop in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00</summary>
        [Newtonsoft.Json.JsonProperty("arrivalAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ArrivalAt { get; set; }
    
        /// <summary>departure from the stop in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00</summary>
        [Newtonsoft.Json.JsonProperty("departureAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DepartureAt { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FlightStop FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightStop>(data);
        }
    
    }
    
    /// <summary>information related to the aircraft</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AircraftEquipment 
    {
        /// <summary>IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{3}")]
        public string Code { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AircraftEquipment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AircraftEquipment>(data);
        }
    
    }
    
    /// <summary>information about the operating flight</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OperatingFlight 
    {
        /// <summary>providing the airline / carrier code</summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string CarrierCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OperatingFlight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OperatingFlight>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Price 
    {
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }
    
        /// <summary>Total amount paid by the user</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Total { get; set; }
    
        /// <summary>Amount without taxes</summary>
        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Base { get; set; }
    
        /// <summary>List of applicable fees</summary>
        [Newtonsoft.Json.JsonProperty("fees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Fee> Fees { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Tax> Taxes { get; set; }
    
        /// <summary>The amount of taxes which are refundable</summary>
        [Newtonsoft.Json.JsonProperty("refundableTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefundableTaxes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Price FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Price>(data);
        }
    
    }
    
    /// <summary>price information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Extended_Price : Price
    {
        /// <summary>BOOK step ONLY - The price margin percentage (plus or minus) that the booking can tolerate. When set to 0, then no price magin is tolerated.</summary>
        [Newtonsoft.Json.JsonProperty("margin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Margin { get; set; }
    
        /// <summary>Total amount paid by the user (including fees and selected additional services).</summary>
        [Newtonsoft.Json.JsonProperty("grandTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GrandTotal { get; set; }
    
        /// <summary>Currency of the payment. It may be different than the requested currency</summary>
        [Newtonsoft.Json.JsonProperty("billingCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingCurrency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalService> AdditionalServices { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Extended_Price FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Extended_Price>(data);
        }
    
    }
    
    /// <summary>a fee</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Fee 
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeType? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Fee FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Fee>(data);
        }
    
    }
    
    /// <summary>type of fee</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum FeeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TICKETING")]
        TICKETING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FORM_OF_PAYMENT")]
        FORM_OF_PAYMENT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUPPLIER")]
        SUPPLIER = 2,
    
    }
    
    /// <summary>a tax</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Tax 
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Tax FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tax>(data);
        }
    
    }
    
    /// <summary>quality of service offered in the cabin where the seat is located in this flight. Economy, premium economy, business or first class</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TravelClass
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ECONOMY")]
        ECONOMY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PREMIUM_ECONOMY")]
        PREMIUM_ECONOMY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FIRST")]
        FIRST = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Co2Emission 
    {
        /// <summary>Weight of Co2 emitted for the concerned segment</summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Weight { get; set; }
    
        /// <summary>Code to qualify unit as pounds or kilos</summary>
        [Newtonsoft.Json.JsonProperty("weightUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cabin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelClass? Cabin { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Co2Emission FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Co2Emission>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OriginDestination 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.</summary>
        [Newtonsoft.Json.JsonProperty("originLocationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginLocationCode { get; set; }
    
        /// <summary>Include other possible locations around the point, located less than this distance in kilometers away. Max:300</summary>
        [Newtonsoft.Json.JsonProperty("originRadius", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OriginRadius { get; set; }
    
        /// <summary>Set of alternative origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.</summary>
        [Newtonsoft.Json.JsonProperty("alternativeOriginsCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AlternativeOriginsCodes { get; set; }
    
        /// <summary>Destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.</summary>
        [Newtonsoft.Json.JsonProperty("destinationLocationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationLocationCode { get; set; }
    
        /// <summary>Include other possible locations around the point, located less than this distance in kilometers away. Max:300</summary>
        [Newtonsoft.Json.JsonProperty("destinationRadius", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DestinationRadius { get; set; }
    
        /// <summary>Set of alternative destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.</summary>
        [Newtonsoft.Json.JsonProperty("alternativeDestinationsCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AlternativeDestinationsCodes { get; set; }
    
        /// <summary>Approximate date and time of departure, specified as a local date and time range.</summary>
        [Newtonsoft.Json.JsonProperty("departureDateTimeRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeRange DepartureDateTimeRange { get; set; }
    
        /// <summary>Approximate date and time of arrival, specified as a local date and time range.</summary>
        [Newtonsoft.Json.JsonProperty("arrivalDateTimeRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeRange ArrivalDateTimeRange { get; set; }
    
        /// <summary>List of included connections points. When an includedViaPoints option is specified, all FlightOffer returned must at least go via this Connecting Point. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider</summary>
        [Newtonsoft.Json.JsonProperty("includedConnectionPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IncludedConnectionPoints { get; set; }
    
        /// <summary>List of excluded connections points. Any FlightOffer with these connections points will be present in response. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider</summary>
        [Newtonsoft.Json.JsonProperty("excludedConnectionPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ExcludedConnectionPoints { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OriginDestination FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginDestination>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DateTimeRange 
    {
        /// <summary>Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-12-25</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>Either 1, 2 or 3 extra days around the local date (IxD for +/- x days - Ex: I3D), Either 1 to 3 days after the local date (PxD for +x days - Ex: P3D), or 1 to 3 days before the local date (MxD for -x days - Ex: M3D)</summary>
        [Newtonsoft.Json.JsonProperty("dateWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[MPI][1-3]D")]
        public string DateWindow { get; set; }
    
        /// <summary>Local time. hh:mm:ss format, e.g 10:30:00</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Time { get; set; }
    
        /// <summary>1 to 12 hours around (both +and -) the local time. Possibly limited by the number of extra days when specified, i.e.  in some situations, it may not be used to exceed the maximum date range. [1-12]H format, e.g. 6H</summary>
        [Newtonsoft.Json.JsonProperty("timeWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([1-9]|10|11|12)H")]
        public string TimeWindow { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DateTimeRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateTimeRange>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Traveler 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("travelerType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelerType TravelerType { get; set; }
    
        /// <summary>if type="HELD_INFANT", corresponds to the adult travelers's id who will share the seat</summary>
        [Newtonsoft.Json.JsonProperty("associatedAdultId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssociatedAdultId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Traveler FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Traveler>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SearchCriteria 
    {
        /// <summary>This option allows to exclude the isAllotment flag associated to a booking class in the search response when it exist.</summary>
        [Newtonsoft.Json.JsonProperty("excludeAllotments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeAllotments { get; set; }
    
        /// <summary>This option allows activate the one-way combinable feature</summary>
        [Newtonsoft.Json.JsonProperty("addOneWayOffers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AddOneWayOffers { get; set; }
    
        /// <summary>Maximum number of flight offers returned (Max 250)</summary>
        [Newtonsoft.Json.JsonProperty("maxFlightOffers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxFlightOffers { get; set; } = 250D;
    
        /// <summary>maximum price per traveler. By default, no limit is applied. If specified, the value should be a positive number with no decimals</summary>
        [Newtonsoft.Json.JsonProperty("maxPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxPrice { get; set; }
    
        /// <summary>This option allows to default to a standard fareOption if no offers are found for the selected fareOption.</summary>
        [Newtonsoft.Json.JsonProperty("allowAlternativeFareOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowAlternativeFareOptions { get; set; }
    
        /// <summary>Requests the system to find at least one flight-offer per day, if possible, when a range of dates is specified. Default is false.</summary>
        [Newtonsoft.Json.JsonProperty("oneFlightOfferPerDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OneFlightOfferPerDay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalInformation AdditionalInformation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pricingOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExtendedPricingOptions PricingOptions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("flightFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlightFilters FlightFilters { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SearchCriteria FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchCriteria>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightOffer 
    {
        /// <summary>the resource name</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        /// <summary>Id of the flight offer</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FlightOfferSource Source { get; set; }
    
        /// <summary>If true, inform that a ticketing will be required at booking step.</summary>
        [Newtonsoft.Json.JsonProperty("instantTicketingRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InstantTicketingRequired { get; set; }
    
        /// <summary>BOOK step ONLY - If true, allows to book a PNR without pricing. Only for the source "GDS"</summary>
        [Newtonsoft.Json.JsonProperty("disablePricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisablePricing { get; set; }
    
        /// <summary>If true, upon completion of the booking, this pricing solution is expected to yield multiple records (a record contains booking information confirmed and stored, typically a Passenger Name Record (PNR), in the provider GDS or system)</summary>
        [Newtonsoft.Json.JsonProperty("nonHomogeneous", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NonHomogeneous { get; set; }
    
        /// <summary>If true, the flight offer fulfills only one originDestination and has to be combined with other oneWays to complete the whole journey.</summary>
        [Newtonsoft.Json.JsonProperty("oneWay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OneWay { get; set; }
    
        /// <summary>If true, a payment card is mandatory to book this flight offer</summary>
        [Newtonsoft.Json.JsonProperty("paymentCardRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PaymentCardRequired { get; set; }
    
        /// <summary>If booked on the same day as the search (with respect to timezone), this flight offer is guaranteed to be thereafter valid for ticketing until this date (included). Unspecified when it does not make sense for this flight offer (e.g. no control over ticketing once booked). YYYY-MM-DD format, e.g. 2019-06-07</summary>
        [Newtonsoft.Json.JsonProperty("lastTicketingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastTicketingDate { get; set; }
    
        /// <summary>Number of seats bookable in a single request. Can not be higher than 9.</summary>
        [Newtonsoft.Json.JsonProperty("numberOfBookableSeats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 9)]
        public double? NumberOfBookableSeats { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itineraries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Itineraries> Itineraries { get; set; }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Extended_Price Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pricingOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PricingOptions PricingOptions { get; set; }
    
        /// <summary>This option ensures that the system will only consider these airlines.</summary>
        [Newtonsoft.Json.JsonProperty("validatingAirlineCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ValidatingAirlineCodes { get; set; }
    
        /// <summary>Fare information for each traveler/segment</summary>
        [Newtonsoft.Json.JsonProperty("travelerPricings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TravelerPricing> TravelerPricings { get; set; }
    
        /// <summary>Fare rules of the flight offer</summary>
        [Newtonsoft.Json.JsonProperty("fareRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FareRules FareRules { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FlightOffer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightOffer>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Segment : FlightSegment
    {
        /// <summary>Id of the segment</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Number of stops</summary>
        [Newtonsoft.Json.JsonProperty("numberOfStops", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfStops { get; set; }
    
        /// <summary>When the flight has a marketing or/and operating airline that is identified as blacklisted by the European Commission. 
        /// 
        /// To improve travel safety, the European Commission regularly updates the list of the banned carriers from operating in Europe. It allows any Travel Agency located in the European Union to easily identify and hide any travel recommendation based on some unsafe airlines. 
        /// The [list of the banned airlines](https://ec.europa.eu/transport/sites/transport/files/air-safety-list_en.pdf) is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline   
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blacklistedInEU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BlacklistedInEU { get; set; }
    
        /// <summary>Co2 informations</summary>
        [Newtonsoft.Json.JsonProperty("co2Emissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Co2Emission> Co2Emissions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Segment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Segment>(data);
        }
    
    }
    
    /// <summary>traveler type
    /// age restrictions : CHILD < 12y, HELD_INFANT < 2y, SEATED_INFANT < 2y, SENIOR >=60y
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TravelerType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ADULT")]
        ADULT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHILD")]
        CHILD = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENIOR")]
        SENIOR = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"YOUNG")]
        YOUNG = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HELD_INFANT")]
        HELD_INFANT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEATED_INFANT")]
        SEATED_INFANT = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STUDENT")]
        STUDENT = 6,
    
    }
    
    /// <summary>fare filter options</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ExtendedPricingOptions 
    {
        /// <summary>If true, returns the flight-offers with included checked bags only</summary>
        [Newtonsoft.Json.JsonProperty("includedCheckedBagsOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludedCheckedBagsOnly { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ExtendedPricingOptions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedPricingOptions>(data);
        }
    
    }
    
    /// <summary>part of the trip covered by the travel class restriction (ALL_SEGMENTS if ommited)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Coverage
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MOST_SEGMENTS")]
        MOST_SEGMENTS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AT_LEAST_ONE_SEGMENT")]
        AT_LEAST_ONE_SEGMENT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ALL_SEGMENTS")]
        ALL_SEGMENTS = 2,
    
    }
    
    /// <summary>additional service type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum AdditionalServiceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CHECKED_BAGS")]
        CHECKED_BAGS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEALS")]
        MEALS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEATS")]
        SEATS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER_SERVICES")]
        OTHER_SERVICES = 3,
    
    }
    
    /// <summary>source of the flight offer</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum FlightOfferSource
    {
        [System.Runtime.Serialization.EnumMember(Value = @"GDS")]
        GDS = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PUBLISHED")]
        PUBLISHED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NEGOTIATED")]
        NEGOTIATED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CORPORATE")]
        CORPORATE = 2,
    
    }
    
    /// <summary>type of fare of the flight-offer</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PricingOptionsFareType : System.Collections.ObjectModel.Collection<Anonymous>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PricingOptionsFareType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PricingOptionsFareType>(data);
        }
    
    }
    
    /// <summary>option specifying a group of fares, which may be valid under certain conditons
    /// Can be used to specify special fare discount for a passenger
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TravelerPricingFareOption
    {
        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INCLUSIVE_TOUR")]
        INCLUSIVE_TOUR = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_MELILLA_RESIDENT")]
        SPANISH_MELILLA_RESIDENT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_CEUTA_RESIDENT")]
        SPANISH_CEUTA_RESIDENT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_CANARY_RESIDENT")]
        SPANISH_CANARY_RESIDENT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_BALEARIC_RESIDENT")]
        SPANISH_BALEARIC_RESIDENT = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_METROPOLITAN_DISCOUNT_PASS")]
        AIR_FRANCE_METROPOLITAN_DISCOUNT_PASS = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_DOM_DISCOUNT_PASS")]
        AIR_FRANCE_DOM_DISCOUNT_PASS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_COMBINED_DISCOUNT_PASS")]
        AIR_FRANCE_COMBINED_DISCOUNT_PASS = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_FAMILY")]
        AIR_FRANCE_FAMILY = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADULT_WITH_COMPANION")]
        ADULT_WITH_COMPANION = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPANION")]
        COMPANION = 11,
    
    }
    
    /// <summary>slice and Dice indicator, such as Local Availability, Sub OnD(Origin and Destination) 1 Availability and Sub OnD 2 Availability</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum SliceDiceIndicator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LOCAL_AVAILABILITY")]
        LOCAL_AVAILABILITY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUB_OD_AVAILABILITY_1")]
        SUB_OD_AVAILABILITY_1 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUB_OD_AVAILABILITY_2")]
        SUB_OD_AVAILABILITY_2 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Dictionaries 
    {
        [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationEntry Locations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aircraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AircraftEntry Aircraft { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyEntry Currencies { get; set; }
    
        [Newtonsoft.Json.JsonProperty("carriers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CarrierEntry Carriers { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Dictionaries FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionaries>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LocationValue 
    {
        /// <summary>City code associated to the airport</summary>
        [Newtonsoft.Json.JsonProperty("cityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CityCode { get; set; }
    
        /// <summary>Country code of the airport</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LocationValue FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationValue>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FareRules 
    {
        /// <summary>The currency of the penalties</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TermAndCondition> Rules { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FareRules FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FareRules>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TermAndCondition 
    {
        /// <summary>This defines what type of modification is concerned in this rule.</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TermAndConditionCategory? Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("circumstances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Circumstances { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notApplicable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotApplicable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxPenaltyAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaxPenaltyAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Description> Descriptions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TermAndCondition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermAndCondition>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class GetFlightOffersQuery 
    {
        /// <summary>The currency code, as defined in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217), to reflect the currency in which this amount is expressed.</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }
    
        /// <summary>Origins and Destinations must be properly ordered in time (chronological order in accordance with the timezone of each location) to describe the journey consistently. Dates and times must not be past nor more than 365 days in the future, according to provider settings.Number of Origins and Destinations must not exceed the limit defined in provider settings.</summary>
        [Newtonsoft.Json.JsonProperty("originDestinations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OriginDestination> OriginDestinations { get; set; } = new System.Collections.ObjectModel.Collection<OriginDestination>();
    
        [Newtonsoft.Json.JsonProperty("travelers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Traveler> Travelers { get; set; } = new System.Collections.ObjectModel.Collection<Traveler>();
    
        /// <summary>Allows enable one or more sources. If present in the list, these sources will be called by the system.</summary>
        [Newtonsoft.Json.JsonProperty("sources", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FlightOfferSource> Sources { get; set; } = new System.Collections.ObjectModel.Collection<FlightOfferSource>();
    
        [Newtonsoft.Json.JsonProperty("searchCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchCriteria SearchCriteria { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static GetFlightOffersQuery FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetFlightOffersQuery>(data);
        }
    
    }
    
    /// <summary>type of service</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ServiceName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRIORITY_BOARDING")]
        PRIORITY_BOARDING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIRPORT_CHECKIN")]
        AIRPORT_CHECKIN = 1,
    
    }
    
    /// <summary>baggageAllowance</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BaggageAllowance 
    {
        /// <summary>Total number of units</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }
    
        /// <summary>Weight of the baggage allowance</summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Weight { get; set; }
    
        /// <summary>Code to qualify unit as pounds or kilos</summary>
        [Newtonsoft.Json.JsonProperty("weightUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BaggageAllowance FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaggageAllowance>(data);
        }
    
    }
    
    /// <summary>most of the flight time should be spent in a cabin of this quality or higher. The accepted travel class is economy, premium economy, business or first class. If no travel class is specified, the search considers any travel class</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TravelClass2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ECONOMY")]
        ECONOMY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PREMIUM_ECONOMY")]
        PREMIUM_ECONOMY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FIRST")]
        FIRST = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Response 
    {
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Issue> Warnings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Collection_Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FlightOffer> Data { get; set; } = new System.Collections.ObjectModel.Collection<FlightOffer>();
    
        [Newtonsoft.Json.JsonProperty("dictionaries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dictionaries Dictionaries { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Response FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Response2 
    {
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Issue> Warnings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Collection_Meta_Link Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FlightOffer> Data { get; set; } = new System.Collections.ObjectModel.Collection<FlightOffer>();
    
        [Newtonsoft.Json.JsonProperty("dictionaries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dictionaries Dictionaries { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Response2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response2>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Source 
    {
        /// <summary>a JSON Pointer [RFC6901] to the associated entity in the request document</summary>
        [Newtonsoft.Json.JsonProperty("pointer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pointer { get; set; }
    
        /// <summary>a string indicating which URI query parameter caused the issue</summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }
    
        /// <summary>a string indicating an example of the right value</summary>
        [Newtonsoft.Json.JsonProperty("example", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Example { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Source FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Source>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OneWayCombinations 
    {
        [Newtonsoft.Json.JsonProperty("originDestinationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginDestinationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("flightOfferIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FlightOfferIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OneWayCombinations FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OneWayCombinations>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Links 
    {
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }
    
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Next { get; set; }
    
        [Newtonsoft.Json.JsonProperty("previous", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Previous { get; set; }
    
        [Newtonsoft.Json.JsonProperty("last", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Last { get; set; }
    
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri First { get; set; }
    
        [Newtonsoft.Json.JsonProperty("up", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Up { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Links FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalService 
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdditionalServiceType? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AdditionalService FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdditionalService>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalInformation 
    {
        /// <summary>If true, returns the price of the first additional bag when the airline is an "Amadeus Ancillary Services" member.</summary>
        [Newtonsoft.Json.JsonProperty("chargeableCheckedBags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ChargeableCheckedBags { get; set; }
    
        /// <summary>If true, returns the fare family name for each flight-offer which supports fare family</summary>
        [Newtonsoft.Json.JsonProperty("brandedFares", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BrandedFares { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AdditionalInformation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdditionalInformation>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightFilters 
    {
        /// <summary>Allows to search a location outside the borders when a radius around a location is specified. Default is false.</summary>
        [Newtonsoft.Json.JsonProperty("crossBorderAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CrossBorderAllowed { get; set; }
    
        /// <summary>This flag enables/disables the possibility to have more overnight flights in Low Fare Search</summary>
        [Newtonsoft.Json.JsonProperty("moreOvernightsAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MoreOvernightsAllowed { get; set; }
    
        /// <summary>This option force to retrieve flight-offer with a departure and a return in the same airport</summary>
        [Newtonsoft.Json.JsonProperty("returnToDepartureAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReturnToDepartureAirport { get; set; }
    
        /// <summary>This flag enable/disable filtering of rail segment (TGV AIR, RAIL ...)</summary>
        [Newtonsoft.Json.JsonProperty("railSegmentAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RailSegmentAllowed { get; set; }
    
        /// <summary>This flag enable/disable filtering of bus segment</summary>
        [Newtonsoft.Json.JsonProperty("busSegmentAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BusSegmentAllowed { get; set; }
    
        /// <summary>This option allows to modify the value for the Elapsed Flying Time (EFT) masterPricer option</summary>
        [Newtonsoft.Json.JsonProperty("maxFlightTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxFlightTime { get; set; }
    
        /// <summary>Restriction towards carriers.</summary>
        [Newtonsoft.Json.JsonProperty("carrierRestrictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CarrierRestrictions CarrierRestrictions { get; set; }
    
        /// <summary>Restriction towards cabins.</summary>
        [Newtonsoft.Json.JsonProperty("cabinRestrictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CabinRestriction> CabinRestrictions { get; set; }
    
        /// <summary>Restriction towards number of connections.</summary>
        [Newtonsoft.Json.JsonProperty("connectionRestriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectionRestriction ConnectionRestriction { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FlightFilters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightFilters>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Itineraries 
    {
        /// <summary>duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M for a duration of 2h10m</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("segments", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Segment> Segments { get; set; } = new System.Collections.ObjectModel.Collection<Segment>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Itineraries FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Itineraries>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PricingOptions 
    {
        /// <summary>type of fare of the flight-offer</summary>
        [Newtonsoft.Json.JsonProperty("fareType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PricingOptionsFareType FareType { get; set; }
    
        /// <summary>Allow Corporate negotiated fares using one or more corporate number (corporate code).</summary>
        [Newtonsoft.Json.JsonProperty("corporateCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CorporateCodes { get; set; }
    
        /// <summary>If true, returns the flight-offers with included checked bags only</summary>
        [Newtonsoft.Json.JsonProperty("includedCheckedBagsOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludedCheckedBagsOnly { get; set; }
    
        /// <summary>If true, returns the flight-offers with refundable fares only</summary>
        [Newtonsoft.Json.JsonProperty("refundableFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RefundableFare { get; set; }
    
        /// <summary>If true, returns the flight-offers with no restriction fares only</summary>
        [Newtonsoft.Json.JsonProperty("noRestrictionFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoRestrictionFare { get; set; }
    
        /// <summary>If true, returns the flight-offers with no penalty fares only</summary>
        [Newtonsoft.Json.JsonProperty("noPenaltyFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoPenaltyFare { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PricingOptions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PricingOptions>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TravelerPricing 
    {
        /// <summary>Id of the traveler</summary>
        [Newtonsoft.Json.JsonProperty("travelerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TravelerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fareOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelerPricingFareOption? FareOption { get; set; }
    
        [Newtonsoft.Json.JsonProperty("travelerType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelerType TravelerType { get; set; }
    
        /// <summary>if type="HELD_INFANT", corresponds to the adult traveler's id who will share the seat</summary>
        [Newtonsoft.Json.JsonProperty("associatedAdultId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssociatedAdultId { get; set; }
    
        /// <summary>price detail of the traveler</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Price Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fareDetailsBySegment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FareDetailsBySegment> FareDetailsBySegment { get; set; } = new System.Collections.ObjectModel.Collection<FareDetailsBySegment>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TravelerPricing FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TravelerPricing>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TermAndConditionCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"REFUND")]
        REFUND = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXCHANGE")]
        EXCHANGE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REVALIDATION")]
        REVALIDATION = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REISSUE")]
        REISSUE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REBOOK")]
        REBOOK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLATION")]
        CANCELLATION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Description 
    {
        [Newtonsoft.Json.JsonProperty("descriptionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescriptionType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Description FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Description>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CarrierRestrictions 
    {
        /// <summary>This flag enable/disable filtering of blacklisted airline by EU. The list of the banned airlines is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline</summary>
        [Newtonsoft.Json.JsonProperty("blacklistedInEUAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BlacklistedInEUAllowed { get; set; }
    
        /// <summary>This option ensures that the system will only consider these airlines.</summary>
        [Newtonsoft.Json.JsonProperty("excludedCarrierCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ExcludedCarrierCodes { get; set; }
    
        /// <summary>This option ensures that the system will only consider these airlines.</summary>
        [Newtonsoft.Json.JsonProperty("includedCarrierCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IncludedCarrierCodes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CarrierRestrictions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CarrierRestrictions>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CabinRestriction 
    {
        [Newtonsoft.Json.JsonProperty("cabin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelClass? Cabin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("coverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Coverage? Coverage { get; set; }
    
        /// <summary>The list of originDestination identifiers for which the cabinRestriction applies</summary>
        [Newtonsoft.Json.JsonProperty("originDestinationIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OriginDestinationIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CabinRestriction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CabinRestriction>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ConnectionRestriction 
    {
        /// <summary>The maximal number of connections for each itinerary. Value can be 0, 1 or 2.</summary>
        [Newtonsoft.Json.JsonProperty("maxNumberOfConnections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxNumberOfConnections { get; set; }
    
        /// <summary>Allow to change airport during connection</summary>
        [Newtonsoft.Json.JsonProperty("airportChangeAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AirportChangeAllowed { get; set; }
    
        /// <summary>This option allows the single segment to have one or more intermediate stops (technical stops).</summary>
        [Newtonsoft.Json.JsonProperty("technicalStopsAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TechnicalStopsAllowed { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ConnectionRestriction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConnectionRestriction>(data);
        }
    
    }
    
    /// <summary>Fare details of the segment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FareDetailsBySegment 
    {
        /// <summary>Id of the segment</summary>
        [Newtonsoft.Json.JsonProperty("segmentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SegmentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cabin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelClass? Cabin { get; set; }
    
        /// <summary>Fare basis specifying the rules of a fare. Usually, though not always, is composed of the booking class code followed by a set of letters and digits representing other characteristics of the ticket, such as refundability, minimum stay requirements, discounts or special promotional elements.</summary>
        [Newtonsoft.Json.JsonProperty("fareBasis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[[A-Z0-9]{1,18}")]
        public string FareBasis { get; set; }
    
        /// <summary>The name of the Fare Family corresponding to the fares. Only for the GDS provider and if the airline has fare families filled</summary>
        [Newtonsoft.Json.JsonProperty("brandedFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandedFare { get; set; }
    
        /// <summary>The code of the booking class, a.k.a. class of service or Reservations/Booking Designator (RBD)</summary>
        [Newtonsoft.Json.JsonProperty("class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{1}")]
        public string Class { get; set; }
    
        /// <summary>True if the corresponding booking class is in an allotment</summary>
        [Newtonsoft.Json.JsonProperty("isAllotment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAllotment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allotmentDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AllotmentDetails AllotmentDetails { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sliceDiceIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SliceDiceIndicator? SliceDiceIndicator { get; set; }
    
        /// <summary>Details of the included checked bags</summary>
        [Newtonsoft.Json.JsonProperty("includedCheckedBags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaggageAllowance IncludedCheckedBags { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalServices AdditionalServices { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FareDetailsBySegment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FareDetailsBySegment>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AllotmentDetails 
    {
        [Newtonsoft.Json.JsonProperty("tourName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TourName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tourReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TourReference { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AllotmentDetails FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AllotmentDetails>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalServices 
    {
        /// <summary>Details of chargeable checked bags</summary>
        [Newtonsoft.Json.JsonProperty("chargeableCheckedBags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaggageAllowance ChargeableCheckedBags { get; set; }
    
        /// <summary>seat number</summary>
        [Newtonsoft.Json.JsonProperty("chargeableSeatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[1-9][0-9]{0,2}[A-Z]?")]
        public string ChargeableSeatNumber { get; set; }
    
        /// <summary>Other services to add</summary>
        [Newtonsoft.Json.JsonProperty("otherServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ServiceName> OtherServices { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AdditionalServices FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdditionalServices>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

    #pragma warning restore
}