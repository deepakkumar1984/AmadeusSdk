//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace AmadeusSdk.FlightLowFareSearch
{
    #pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class Client 
    {
        internal string _baseUrl = "https://test.api.amadeus.com/v1";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Find the cheapest bookable flights.</summary>
        /// <param name="origin">city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler will depart, e.g. BOS for Boston</param>
        /// <param name="destination">city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris</param>
        /// <param name="departureDate">the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25</param>
        /// <param name="returnDate">the date on which the traveler will depart from the destination to return to the origin. If this parameter is not specified, only one-way itineraries are found. If this parameter is specified, only round-trip itineraries are found. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-02-28</param>
        /// <param name="arrivalBy">the date and time by which the last flight of the outbound should arrive at the destination. Datetimes are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm format, e.g. 2016-12-31T23:59</param>
        /// <param name="returnBy">the date and time by which the last flight of the inbound should arrive at the origin. Datetimes are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm format, e.g. 2017-12-31T12:01</param>
        /// <param name="adults">the number of adult travelers (age 12 or older on date of departure). If specified, this number should be greater than or equal to 0</param>
        /// <param name="children">the number of child travelers (older than age 2 and younger than age 12 on date of departure) who will each have their own separate seat. If specified, this number should be greater than or equal to 0</param>
        /// <param name="infants">the number of infant travelers (whose age is less or equal to 2 on date of departure). Infants travel on the lap of an adult or a senior traveler, and thus the number of infants must not exceed the sum of the number of adults and seniors. If specified, this number should be greater than or equal to 0</param>
        /// <param name="seniors">the number of senior travelers (age 65 or older on date of departure). If specified, this number should be greater than or equal to 0</param>
        /// <param name="travelClass">most of the flight time should be spent in a cabin of this quality or higher. The accepted travel class is economy, premium economy, business or first class. If no travel class is specified, the search considers any travel class</param>
        /// <param name="includeAirlines">if specified, the flight offer will include at least one segment per bound marketed by one of these airlines. Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X</param>
        /// <param name="excludeAirlines">if specified, the flight offer will exclude all the flights marketed by one of these airlines. Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X</param>
        /// <param name="nonStop">if set to true, the search will find only flights going from the origin to the destination with no stop in between</param>
        /// <param name="currency">the preferred currency for the flight offers. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro</param>
        /// <param name="maxPrice">maximum price of the flight offers to find, in EUR unless some other currency is specified. By default, no limit is applied. If specified, the value should be a positive number with no decimals</param>
        /// <param name="max">maximum number of flight offers to return. 
        /// 
        /// If specified, the value should be between 1 and 250. When not specified, system uses the default value **50**.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<FlightOffers> GetFlightOffersAsync(string origin, string destination, System.DateTimeOffset departureDate, System.DateTimeOffset? returnDate, System.DateTimeOffset? arrivalBy, System.DateTimeOffset? returnBy, int? adults, int? children, int? infants, int? seniors, TravelClass2? travelClass, string includeAirlines, string excludeAirlines, bool? nonStop, string currency, int? maxPrice, int? max)
        {
            return GetFlightOffersAsync(origin, destination, departureDate, returnDate, arrivalBy, returnBy, adults, children, infants, seniors, travelClass, includeAirlines, excludeAirlines, nonStop, currency, maxPrice, max, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Find the cheapest bookable flights.</summary>
        /// <param name="origin">city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler will depart, e.g. BOS for Boston</param>
        /// <param name="destination">city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris</param>
        /// <param name="departureDate">the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25</param>
        /// <param name="returnDate">the date on which the traveler will depart from the destination to return to the origin. If this parameter is not specified, only one-way itineraries are found. If this parameter is specified, only round-trip itineraries are found. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-02-28</param>
        /// <param name="arrivalBy">the date and time by which the last flight of the outbound should arrive at the destination. Datetimes are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm format, e.g. 2016-12-31T23:59</param>
        /// <param name="returnBy">the date and time by which the last flight of the inbound should arrive at the origin. Datetimes are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm format, e.g. 2017-12-31T12:01</param>
        /// <param name="adults">the number of adult travelers (age 12 or older on date of departure). If specified, this number should be greater than or equal to 0</param>
        /// <param name="children">the number of child travelers (older than age 2 and younger than age 12 on date of departure) who will each have their own separate seat. If specified, this number should be greater than or equal to 0</param>
        /// <param name="infants">the number of infant travelers (whose age is less or equal to 2 on date of departure). Infants travel on the lap of an adult or a senior traveler, and thus the number of infants must not exceed the sum of the number of adults and seniors. If specified, this number should be greater than or equal to 0</param>
        /// <param name="seniors">the number of senior travelers (age 65 or older on date of departure). If specified, this number should be greater than or equal to 0</param>
        /// <param name="travelClass">most of the flight time should be spent in a cabin of this quality or higher. The accepted travel class is economy, premium economy, business or first class. If no travel class is specified, the search considers any travel class</param>
        /// <param name="includeAirlines">if specified, the flight offer will include at least one segment per bound marketed by one of these airlines. Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X</param>
        /// <param name="excludeAirlines">if specified, the flight offer will exclude all the flights marketed by one of these airlines. Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X</param>
        /// <param name="nonStop">if set to true, the search will find only flights going from the origin to the destination with no stop in between</param>
        /// <param name="currency">the preferred currency for the flight offers. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro</param>
        /// <param name="maxPrice">maximum price of the flight offers to find, in EUR unless some other currency is specified. By default, no limit is applied. If specified, the value should be a positive number with no decimals</param>
        /// <param name="max">maximum number of flight offers to return. 
        /// 
        /// If specified, the value should be between 1 and 250. When not specified, system uses the default value **50**.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        [System.Obsolete]
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<FlightOffers> GetFlightOffersAsync(string origin, string destination, System.DateTimeOffset departureDate, System.DateTimeOffset? returnDate, System.DateTimeOffset? arrivalBy, System.DateTimeOffset? returnBy, int? adults, int? children, int? infants, int? seniors, TravelClass2? travelClass, string includeAirlines, string excludeAirlines, bool? nonStop, string currency, int? maxPrice, int? max, System.Threading.CancellationToken cancellationToken)
        {
            if (origin == null)
                throw new System.ArgumentNullException("origin");
    
            if (destination == null)
                throw new System.ArgumentNullException("destination");
    
            if (departureDate == null)
                throw new System.ArgumentNullException("departureDate");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/shopping/flight-offers?");
            urlBuilder_.Append("origin=").Append(System.Uri.EscapeDataString(ConvertToString(origin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("destination=").Append(System.Uri.EscapeDataString(ConvertToString(destination, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("departureDate=").Append(System.Uri.EscapeDataString(departureDate.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (returnDate != null) 
            {
                urlBuilder_.Append("returnDate=").Append(System.Uri.EscapeDataString(returnDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arrivalBy != null) 
            {
                urlBuilder_.Append("arrivalBy=").Append(System.Uri.EscapeDataString(arrivalBy.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (returnBy != null) 
            {
                urlBuilder_.Append("returnBy=").Append(System.Uri.EscapeDataString(returnBy.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adults != null) 
            {
                urlBuilder_.Append("adults=").Append(System.Uri.EscapeDataString(ConvertToString(adults, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (children != null) 
            {
                urlBuilder_.Append("children=").Append(System.Uri.EscapeDataString(ConvertToString(children, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (infants != null) 
            {
                urlBuilder_.Append("infants=").Append(System.Uri.EscapeDataString(ConvertToString(infants, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (seniors != null) 
            {
                urlBuilder_.Append("seniors=").Append(System.Uri.EscapeDataString(ConvertToString(seniors, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (travelClass != null) 
            {
                urlBuilder_.Append("travelClass=").Append(System.Uri.EscapeDataString(ConvertToString(travelClass, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeAirlines != null) 
            {
                urlBuilder_.Append("includeAirlines=").Append(System.Uri.EscapeDataString(ConvertToString(includeAirlines, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludeAirlines != null) 
            {
                urlBuilder_.Append("excludeAirlines=").Append(System.Uri.EscapeDataString(ConvertToString(excludeAirlines, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nonStop != null) 
            {
                urlBuilder_.Append("nonStop=").Append(System.Uri.EscapeDataString(ConvertToString(nonStop, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currency != null) 
            {
                urlBuilder_.Append("currency=").Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxPrice != null) 
            {
                urlBuilder_.Append("maxPrice=").Append(System.Uri.EscapeDataString(ConvertToString(maxPrice, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (max != null) 
            {
                urlBuilder_.Append("max=").Append(System.Uri.EscapeDataString(ConvertToString(max, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(FlightOffers); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<FlightOffers>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error_400); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error_400>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error_400>("code    | title                                 \n------- | ------------------------------------- \n425     | INVALID DATE\n432     | INVALID CURRENCY CODE\n477     | INVALID FORMAT\n1379    | VERIFY CURRENCY CODE\n4926    | INVALID DATA RECEIVED\n32171   | MANDATORY DATA MISSING\n", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error_500); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error_500>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error_500>("Unexpected error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FlightOffers);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    /// <summary>quality of service offered in the cabin where the seat is located in this flight. Economy, premium economy, business or first class</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TravelClass
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ECONOMY")]
        ECONOMY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PREMIUM_ECONOMY")]
        PREMIUM_ECONOMY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FIRST")]
        FIRST = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PricingDetail 
    {
        [Newtonsoft.Json.JsonProperty("travelClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelClass? TravelClass { get; set; }
    
        /// <summary>class of the fare that applied. Fare classes are subdivisions of travel classes and vary from airline to airline. For instance, Y designs usually a full fare economy class</summary>
        [Newtonsoft.Json.JsonProperty("fareClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]")]
        public string FareClass { get; set; }
    
        /// <summary>the number of seats still available at this time of search with this class of fare</summary>
        [Newtonsoft.Json.JsonProperty("availability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Availability { get; set; }
    
        /// <summary>the identifier of the fare that applied. Farebasis identifiers vary from airline to airline. It is usually composed of the fare class followed by other alphanumeric codes that identify the rules that apply to the fare. For instance, WH7LNR might mean that the fare class is W, that it is valid during high-season only (H) and for a 7-day advance purchase, long-haul (L) and not refundable (NR)</summary>
        [Newtonsoft.Json.JsonProperty("fareBasis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FareBasis { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PricingDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PricingDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Segment 
    {
        [Newtonsoft.Json.JsonProperty("flightSegment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlightSegment FlightSegment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pricingDetailPerAdult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PricingDetail PricingDetailPerAdult { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pricingDetailPerInfant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PricingDetail PricingDetailPerInfant { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pricingDetailPerChild", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PricingDetail PricingDetailPerChild { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pricingDetailPerSenior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PricingDetail PricingDetailPerSenior { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Segment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Segment>(data);
        }
    
    }
    
    /// <summary>defining a flight segment; including both operating and marketing details when applicable</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightSegment 
    {
        [Newtonsoft.Json.JsonProperty("departure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlightEndPoint Departure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("arrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlightEndPoint Arrival { get; set; }
    
        /// <summary>providing the airline / carrier code</summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string CarrierCode { get; set; }
    
        /// <summary>the flight number as assigned by the carrier</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string Number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aircraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AircraftEquipment Aircraft { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperatingFlight Operating { get; set; }
    
        /// <summary>stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        /// <summary>information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...</summary>
        [Newtonsoft.Json.JsonProperty("stops", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FlightStop> Stops { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FlightSegment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightSegment>(data);
        }
    
    }
    
    /// <summary>departure or arrival information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightEndPoint 
    {
        /// <summary>[IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx)</summary>
        [Newtonsoft.Json.JsonProperty("iataCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IataCode { get; set; }
    
        /// <summary>terminal name / number</summary>
        [Newtonsoft.Json.JsonProperty("terminal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Terminal { get; set; }
    
        /// <summary>local date and time in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm±hh:mm format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? At { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FlightEndPoint FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightEndPoint>(data);
        }
    
    }
    
    /// <summary>details of stops for direct or change of gauge flights</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightStop 
    {
        /// <summary>[IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx)</summary>
        [Newtonsoft.Json.JsonProperty("iataCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IataCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("newAircraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AircraftEquipment NewAircraft { get; set; }
    
        /// <summary>stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        /// <summary>arrival at the stop in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm±hh:mm format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("arrivalAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ArrivalAt { get; set; }
    
        /// <summary>departure from the stop in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm±hh:mm format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("departureAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DepartureAt { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FlightStop FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightStop>(data);
        }
    
    }
    
    /// <summary>information related to the aircraft</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AircraftEquipment 
    {
        /// <summary>IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{3}")]
        public string Code { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AircraftEquipment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AircraftEquipment>(data);
        }
    
    }
    
    /// <summary>information about the operating flight</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OperatingFlight 
    {
        /// <summary>providing the airline / carrier code</summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string CarrierCode { get; set; }
    
        /// <summary>the flight number as assigned by the carrier</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string Number { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OperatingFlight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OperatingFlight>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Price 
    {
        /// <summary>Total amount paid by the user</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Total { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalTaxes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Price FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Price>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Links 
    {
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Links FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LocationEntry 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LocationEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationEntry>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightOffers 
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FlightOffer> Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dictionaries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dictionaries Dictionaries { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Issue> Warnings { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FlightOffers FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightOffers>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightOffer 
    {
        /// <summary>the resource name</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>the resource identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("offerItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OfferItem> OfferItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FlightOffer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightOffer>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferItem 
    {
        [Newtonsoft.Json.JsonProperty("services", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Service> Services { get; set; }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Price Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pricePerAdult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Price PricePerAdult { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pricePerInfant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Price PricePerInfant { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pricePerChild", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Price PricePerChild { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pricePerSenior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Price PricePerSenior { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OfferItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OfferItem>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Service 
    {
        [Newtonsoft.Json.JsonProperty("segments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Segment> Segments { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Service FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Service>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DictionaryEntry 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DictionaryEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryEntry>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LocationValue 
    {
        /// <summary>Location type: airport or city</summary>
        [Newtonsoft.Json.JsonProperty("subType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationValueSubType? SubType { get; set; }
    
        /// <summary>Name of the location</summary>
        [Newtonsoft.Json.JsonProperty("detailedName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LocationValue FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationValue>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Dictionaries 
    {
        [Newtonsoft.Json.JsonProperty("carriers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryEntry Carriers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryEntry Currencies { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aircraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryEntry Aircraft { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationEntry Locations { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Dictionaries FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionaries>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Meta 
    {
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }
    
        /// <summary>the currency in which the prices of the flight offers are returned. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{3}")]
        public string Currency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Defaults Defaults { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Meta FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Meta>(data);
        }
    
    }
    
    /// <summary>the query parameters for which default values were used are returned here</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Defaults 
    {
        /// <summary>search finds only direct flights going from the origin to the destination with no stop</summary>
        [Newtonsoft.Json.JsonProperty("nonStop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NonStop { get; set; }
    
        /// <summary>search does the computation for one adult</summary>
        [Newtonsoft.Json.JsonProperty("adults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Adults { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Defaults FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Defaults>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Error_400 
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Issue> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Issue>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Error_400 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error_400>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Error_500 
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Issue> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Issue>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Error_500 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error_500>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Issue 
    {
        /// <summary>the HTTP status code applicable to this error</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        /// <summary>an application-specific error code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Code { get; set; }
    
        /// <summary>a short summary of the error</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>explanation of the error</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        /// <summary>an object containing references to the source of the error</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Source Source { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Issue FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Issue>(data);
        }
    
    }
    
    /// <summary>most of the flight time should be spent in a cabin of this quality or higher. The accepted travel class is economy, premium economy, business or first class. If no travel class is specified, the search considers any travel class</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TravelClass2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ECONOMY")]
        ECONOMY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PREMIUM_ECONOMY")]
        PREMIUM_ECONOMY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FIRST")]
        FIRST = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum LocationValueSubType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AIRPORT")]
        AIRPORT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CITY")]
        CITY = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Source 
    {
        /// <summary>a JSON Pointer [RFC6901] to the associated entity in the request document</summary>
        [Newtonsoft.Json.JsonProperty("pointer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pointer { get; set; }
    
        /// <summary>a string indicating which URI query parameter caused the issue</summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }
    
        /// <summary>a string indicating an example of the right value</summary>
        [Newtonsoft.Json.JsonProperty("example", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Example { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Source FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Source>(data);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

    #pragma warning restore
}