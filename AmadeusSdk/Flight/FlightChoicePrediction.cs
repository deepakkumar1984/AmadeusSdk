//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace AmadeusSdk.FlightChoicePrediction
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class Client
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Predict the choice of flight offers.</summary>
        /// <param name="x_HTTP_Method_Override">the HTTP method to apply</param>
        /// <returns>Flight Offers Search Reply with prediction</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Success> GetFlightChoicePredictAsync(FlightOffersSearchReply body, string x_HTTP_Method_Override)
        {
            return GetFlightChoicePredictAsync(body, x_HTTP_Method_Override, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Predict the choice of flight offers.</summary>
        /// <param name="x_HTTP_Method_Override">the HTTP method to apply</param>
        /// <returns>Flight Offers Search Reply with prediction</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Success> GetFlightChoicePredictAsync(FlightOffersSearchReply body, string x_HTTP_Method_Override, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("shopping/flight-offers/prediction");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_HTTP_Method_Override == null)
                        throw new System.ArgumentNullException("x_HTTP_Method_Override");
                    request_.Headers.TryAddWithoutValidation("X-HTTP-Method-Override", ConvertToString(x_HTTP_Method_Override, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Success>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error_400>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Error_400>("code    | title                                 \n------- | ------------------------------------- \n477     | INVALID FORMAT\n32171   | MANDATORY DATA MISSING\n", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error_500>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Error_500>("Unexpected error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Success);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightOffer 
    {
        /// <summary>the resource name</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        /// <summary>Id of the flight offer</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>the choice probability of this Flight Offer. The value is between 1 (100% chance the FlightOffer will be selected) and 0 (no change the FlightOffer will be selected)</summary>
        [Newtonsoft.Json.JsonProperty("choiceProbability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChoiceProbability { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FlightOfferSource Source { get; set; }
    
        /// <summary>If true, inform that a ticketing will be required at booking step.</summary>
        [Newtonsoft.Json.JsonProperty("instantTicketingRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InstantTicketingRequired { get; set; }
    
        /// <summary>BOOK step ONLY - If true, allows to book a PNR without pricing. Only for the source "GDS"</summary>
        [Newtonsoft.Json.JsonProperty("disablePricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisablePricing { get; set; }
    
        /// <summary>If true, upon completion of the booking, this pricing solution is expected to yield multiple records (a record contains booking information confirmed and stored, typically a Passenger Name Record (PNR), in the provider GDS or system)</summary>
        [Newtonsoft.Json.JsonProperty("nonHomogeneous", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NonHomogeneous { get; set; }
    
        /// <summary>If true, the flight offer fulfills only one originDestination and has to be combined with other oneWays to complete the whole journey.</summary>
        [Newtonsoft.Json.JsonProperty("oneWay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OneWay { get; set; }
    
        /// <summary>If true, a payment card is mandatory to book this flight offer</summary>
        [Newtonsoft.Json.JsonProperty("paymentCardRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PaymentCardRequired { get; set; }
    
        /// <summary>If booked on the same day as the search (with respect to timezone), this flight offer is guaranteed to be thereafter valid for ticketing until this date (included). Unspecified when it does not make sense for this flight offer (e.g. no control over ticketing once booked). YYYY-MM-DD format, e.g. 2019-06-07</summary>
        [Newtonsoft.Json.JsonProperty("lastTicketingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastTicketingDate { get; set; }
    
        /// <summary>Number of seats bookable in a single request. Can not be higher than 9.</summary>
        [Newtonsoft.Json.JsonProperty("numberOfBookableSeats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1D, 9D)]
        public double? NumberOfBookableSeats { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itineraries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(250)]
        public System.Collections.Generic.ICollection<Itineraries> Itineraries { get; set; }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Extended_Price Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pricingOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PricingOptions PricingOptions { get; set; }
    
        /// <summary>This option ensures that the system will only consider these airlines.</summary>
        [Newtonsoft.Json.JsonProperty("validatingAirlineCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(9)]
        public System.Collections.Generic.ICollection<string> ValidatingAirlineCodes { get; set; }
    
        /// <summary>Fare information for each traveler/segment</summary>
        [Newtonsoft.Json.JsonProperty("travelerPricings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(18)]
        public System.Collections.Generic.ICollection<TravelerPricings> TravelerPricings { get; set; }
    
        /// <summary>Fare rules of the flight offer</summary>
        [Newtonsoft.Json.JsonProperty("fareRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FareRules FareRules { get; set; }
    
    
    }
    
    /// <summary>source of the flight offer</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum FlightOfferSource
    {
        [System.Runtime.Serialization.EnumMember(Value = @"GDS")]
        GDS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PYTON")]
        PYTON = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Segment : FlightSegment
    {
        /// <summary>Id of the segment</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Number of stops</summary>
        [Newtonsoft.Json.JsonProperty("numberOfStops", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfStops { get; set; }
    
        /// <summary>When the flight has a marketing or/and operating airline that is identified as blacklisted by the European Commission. 
        /// 
        /// To improve travel safety, the European Commission regularly updates the list of the banned carriers from operating in Europe. It allows any Travel Agency located in the European Union to easily identify and hide any travel recommendation based on some unsafe airlines. 
        /// The [list of the banned airlines](https://ec.europa.eu/transport/sites/transport/files/air-safety-list_en.pdf) is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline   
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blacklistedInEU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BlacklistedInEU { get; set; }
    
        /// <summary>Co2 informations</summary>
        [Newtonsoft.Json.JsonProperty("co2Emissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Co2Emission> Co2Emissions { get; set; }
    
    
    }
    
    /// <summary>defining a flight segment; including both operating and marketing details when applicable</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightSegment 
    {
        [Newtonsoft.Json.JsonProperty("departure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlightEndPoint Departure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("arrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlightEndPoint Arrival { get; set; }
    
        /// <summary>providing the airline / carrier code</summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string CarrierCode { get; set; }
    
        /// <summary>the flight number as assigned by the carrier</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string Number { get; set; }
    
        /// <summary>the flight number suffix as assigned by the carrier</summary>
        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string Suffix { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aircraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AircraftEquipment Aircraft { get; set; }
    
        /// <summary>reservation booking designator (RBD) of the carrier</summary>
        [Newtonsoft.Json.JsonProperty("class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string Class { get; set; }
    
        /// <summary>booking cabin / class of service of the carrier</summary>
        [Newtonsoft.Json.JsonProperty("cabin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cabin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperatingFlight Operating { get; set; }
    
        /// <summary>stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        /// <summary>information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...</summary>
        [Newtonsoft.Json.JsonProperty("stops", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FlightStop> Stops { get; set; }
    
    
    }
    
    /// <summary>departure or arrival information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightEndPoint : OriginalFlightEndPoint
    {
        /// <summary>local date and time in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00</summary>
        [Newtonsoft.Json.JsonProperty("at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? At { get; set; }
    
    
    }
    
    /// <summary>departure or arrival information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OriginalFlightEndPoint 
    {
        /// <summary>[IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx)</summary>
        [Newtonsoft.Json.JsonProperty("iataCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IataCode { get; set; }
    
        /// <summary>terminal name / number</summary>
        [Newtonsoft.Json.JsonProperty("terminal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Terminal { get; set; }
    
    
    }
    
    /// <summary>information related to the aircraft</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AircraftEquipment 
    {
        /// <summary>IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{3}")]
        public string Code { get; set; }
    
        /// <summary>aircraft Configuration Version code. Physical configuration, also called ACV code (aircraft type + fitted configuration)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configurationVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z0-9]{3}")]
        public string ConfigurationVersion { get; set; }
    
    
    }
    
    /// <summary>details of stops for direct or change of gauge flights</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OriginalFlightStop 
    {
        /// <summary>[IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx)</summary>
        [Newtonsoft.Json.JsonProperty("iataCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IataCode { get; set; }
    
        /// <summary>stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
    
    }
    
    /// <summary>details of stops for direct or change of gauge flights</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightStop : OriginalFlightStop
    {
        /// <summary>arrival at the stop in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00</summary>
        [Newtonsoft.Json.JsonProperty("arrivalAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ArrivalAt { get; set; }
    
        /// <summary>departure from the stop in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00</summary>
        [Newtonsoft.Json.JsonProperty("departureAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DepartureAt { get; set; }
    
    
    }
    
    /// <summary>information about the operating flight</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OperatingFlight 
    {
        /// <summary>providing the airline / carrier code</summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string CarrierCode { get; set; }
    
        /// <summary>the flight number as assigned by the carrier</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string Number { get; set; }
    
        /// <summary>the flight number suffix as assigned by the carrier</summary>
        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string Suffix { get; set; }
    
    
    }
    
    /// <summary>option specifying a group of fares, which may be valid under certain conditons
    /// Can be used to specify special fare discount for a passenger
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TravelerPricingFareOption
    {
        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INCLUSIVE_TOUR")]
        INCLUSIVE_TOUR = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_MELILLA_RESIDENT")]
        SPANISH_MELILLA_RESIDENT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_CEUTA_RESIDENT")]
        SPANISH_CEUTA_RESIDENT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_CANARY_RESIDENT")]
        SPANISH_CANARY_RESIDENT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_BALEARIC_RESIDENT")]
        SPANISH_BALEARIC_RESIDENT = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_METROPOLITAN_DISCOUNT_PASS")]
        AIR_FRANCE_METROPOLITAN_DISCOUNT_PASS = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_DOM_DISCOUNT_PASS")]
        AIR_FRANCE_DOM_DISCOUNT_PASS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_COMBINED_DISCOUNT_PASS")]
        AIR_FRANCE_COMBINED_DISCOUNT_PASS = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_FAMILY")]
        AIR_FRANCE_FAMILY = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADULT_WITH_COMPANION")]
        ADULT_WITH_COMPANION = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPANION")]
        COMPANION = 11,
    
    }
    
    /// <summary>traveler type
    /// age restrictions : CHILD &lt; 12y, HELD_INFANT &lt; 2y, SEATED_INFANT &lt; 2y, SENIOR &gt;=60y
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TravelerType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ADULT")]
        ADULT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHILD")]
        CHILD = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENIOR")]
        SENIOR = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"YOUNG")]
        YOUNG = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HELD_INFANT")]
        HELD_INFANT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEATED_INFANT")]
        SEATED_INFANT = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STUDENT")]
        STUDENT = 6,
    
    }
    
    /// <summary>slice and Dice indicator, such as Local Availability, Sub OnD(Origin and Destination) 1 Availability and Sub OnD 2 Availability</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum SliceDiceIndicator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LOCAL_AVAILABILITY")]
        LOCAL_AVAILABILITY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUB_OD_AVAILABILITY_1")]
        SUB_OD_AVAILABILITY_1 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUB_OD_AVAILABILITY_2")]
        SUB_OD_AVAILABILITY_2 = 2,
    
    }
    
    /// <summary>baggageAllowance</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BaggageAllowance 
    {
        /// <summary>Total number of units</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }
    
        /// <summary>Weight of the baggage allowance</summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Weight { get; set; }
    
        /// <summary>Code to qualify unit as pounds or kilos</summary>
        [Newtonsoft.Json.JsonProperty("weightUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Price 
    {
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }
    
        /// <summary>Total amount paid by the user</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Total { get; set; }
    
        /// <summary>Amount without taxes</summary>
        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Base { get; set; }
    
        /// <summary>List of applicable fees</summary>
        [Newtonsoft.Json.JsonProperty("fees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Fee> Fees { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Tax> Taxes { get; set; }
    
    
    }
    
    /// <summary>price information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Extended_Price : Price
    {
        /// <summary>BOOK step ONLY - The price margin percentage (plus or minus) that the booking can tolerate. When set to 0, then no price magin is tolerated.</summary>
        [Newtonsoft.Json.JsonProperty("margin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Margin { get; set; }
    
        /// <summary>Total amount paid by the user (including fees and selected additional services).</summary>
        [Newtonsoft.Json.JsonProperty("grandTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GrandTotal { get; set; }
    
        /// <summary>Currency of the payment. It may be different than the requested currency</summary>
        [Newtonsoft.Json.JsonProperty("billingCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingCurrency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalServices> AdditionalServices { get; set; }
    
    
    }
    
    /// <summary>a fee</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Fee 
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeType? Type { get; set; }
    
    
    }
    
    /// <summary>type of fee</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum FeeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TICKETING")]
        TICKETING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FORM_OF_PAYMENT")]
        FORM_OF_PAYMENT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUPPLIER")]
        SUPPLIER = 2,
    
    }
    
    /// <summary>a tax</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Tax 
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
    
    }
    
    /// <summary>type of fare of the flight-offer</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PricingOptionsFareType : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>additional service type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum AdditionalServiceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CHECKED_BAGS")]
        CHECKED_BAGS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEALS")]
        MEALS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEATS")]
        SEATS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER_SERVICES")]
        OTHER_SERVICES = 3,
    
    }
    
    /// <summary>quality of service offered in the cabin where the seat is located in this flight. Economy, premium economy, business or first class</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TravelClass
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ECONOMY")]
        ECONOMY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PREMIUM_ECONOMY")]
        PREMIUM_ECONOMY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FIRST")]
        FIRST = 3,
    
    }
    
    /// <summary>type of service</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ServiceName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRIORITY_BOARDING")]
        PRIORITY_BOARDING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIRPORT_CHECKIN")]
        AIRPORT_CHECKIN = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Co2Emission 
    {
        /// <summary>Weight of Co2 emitted for the concerned segment</summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Weight { get; set; }
    
        /// <summary>Code to qualify unit as pounds or kilos</summary>
        [Newtonsoft.Json.JsonProperty("weightUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cabin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelClass? Cabin { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FareRules 
    {
        /// <summary>The currency of the penalties</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<TermAndCondition> Rules { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TermAndCondition 
    {
        /// <summary>This defines what type of modification is concerned in this rule.</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TermAndConditionCategory? Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("circumstances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Circumstances { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notApplicable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotApplicable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxPenaltyAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaxPenaltyAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Descriptions> Descriptions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightOffersSearchReply 
    {
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Issue> Warnings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Collection_Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FlightOffer> Data { get; set; } = new System.Collections.ObjectModel.Collection<FlightOffer>();
    
        [Newtonsoft.Json.JsonProperty("dictionaries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dictionaries Dictionaries { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LocationEntry 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LocationValue 
    {
        /// <summary>City code associated to the airport</summary>
        [Newtonsoft.Json.JsonProperty("cityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CityCode { get; set; }
    
        /// <summary>Country code of the airport</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AircraftEntry 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CurrencyEntry 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CarrierEntry 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Dictionaries 
    {
        [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationEntry Locations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aircraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AircraftEntry Aircraft { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyEntry Currencies { get; set; }
    
        [Newtonsoft.Json.JsonProperty("carriers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CarrierEntry Carriers { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CollectionLinks 
    {
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }
    
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Next { get; set; }
    
        [Newtonsoft.Json.JsonProperty("previous", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Previous { get; set; }
    
        [Newtonsoft.Json.JsonProperty("last", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Last { get; set; }
    
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri First { get; set; }
    
        [Newtonsoft.Json.JsonProperty("up", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Up { get; set; }
    
    
    }
    
    /// <summary>meta information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Collection_Meta 
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CollectionLinks Links { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oneWayCombinations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OneWayCombinations> OneWayCombinations { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Error_400 
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Issue> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Issue>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Error_500 
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Issue> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Issue>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Issue 
    {
        /// <summary>the HTTP status code applicable to this error</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        /// <summary>an application-specific error code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Code { get; set; }
    
        /// <summary>a short summary of the error</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>explanation of the error</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        /// <summary>an object containing references to the source of the error</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Source Source { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Success 
    {
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Issue> Warnings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Collection_Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FlightOffer> Data { get; set; } = new System.Collections.ObjectModel.Collection<FlightOffer>();
    
        [Newtonsoft.Json.JsonProperty("dictionaries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dictionaries Dictionaries { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Itineraries 
    {
        /// <summary>duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M for a duration of 2h10m</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("segments", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(9)]
        public System.Collections.Generic.ICollection<Segment> Segments { get; set; } = new System.Collections.ObjectModel.Collection<Segment>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PricingOptions 
    {
        /// <summary>type of fare of the flight-offer</summary>
        [Newtonsoft.Json.JsonProperty("fareType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PricingOptionsFareType FareType { get; set; }
    
        /// <summary>Allow Corporate negotiated fares using one or more corporate number (corporate code).</summary>
        [Newtonsoft.Json.JsonProperty("corporateCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CorporateCodes { get; set; }
    
        /// <summary>If true, returns the flight-offers with included checked bags only</summary>
        [Newtonsoft.Json.JsonProperty("includedCheckedBagsOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludedCheckedBagsOnly { get; set; }
    
        /// <summary>If true, returns the flight-offers with refundable fares only</summary>
        [Newtonsoft.Json.JsonProperty("refundableFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RefundableFare { get; set; }
    
        /// <summary>If true, returns the flight-offers with no restriction fares only</summary>
        [Newtonsoft.Json.JsonProperty("noRestrictionFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoRestrictionFare { get; set; }
    
        /// <summary>If true, returns the flight-offers with no penalty fares only</summary>
        [Newtonsoft.Json.JsonProperty("noPenaltyFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoPenaltyFare { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TravelerPricings 
    {
        /// <summary>Id of the traveler</summary>
        [Newtonsoft.Json.JsonProperty("travelerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TravelerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fareOption", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelerPricingFareOption FareOption { get; set; }
    
        [Newtonsoft.Json.JsonProperty("travelerType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelerType TravelerType { get; set; }
    
        /// <summary>if type="HELD_INFANT", corresponds to the adult traveler's id who will share the seat</summary>
        [Newtonsoft.Json.JsonProperty("associatedAdultId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssociatedAdultId { get; set; }
    
        /// <summary>price detail of the traveler</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Price Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fareDetailsBySegment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(18)]
        public System.Collections.Generic.ICollection<FareDetailsBySegment> FareDetailsBySegment { get; set; } = new System.Collections.ObjectModel.Collection<FareDetailsBySegment>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalServices 
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdditionalServiceType? Type { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PUBLISHED")]
        PUBLISHED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NEGOTIATED")]
        NEGOTIATED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CORPORATE")]
        CORPORATE = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TermAndConditionCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"REFUND")]
        REFUND = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXCHANGE")]
        EXCHANGE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REVALIDATION")]
        REVALIDATION = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REISSUE")]
        REISSUE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REBOOK")]
        REBOOK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLATION")]
        CANCELLATION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Descriptions 
    {
        [Newtonsoft.Json.JsonProperty("descriptionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescriptionType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OneWayCombinations 
    {
        [Newtonsoft.Json.JsonProperty("originDestinationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginDestinationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("flightOfferIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FlightOfferIds { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Source 
    {
        /// <summary>a JSON Pointer [RFC6901] to the associated entity in the request document</summary>
        [Newtonsoft.Json.JsonProperty("pointer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pointer { get; set; }
    
        /// <summary>a string indicating which URI query parameter caused the issue</summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }
    
        /// <summary>a string indicating an example of the right value</summary>
        [Newtonsoft.Json.JsonProperty("example", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Example { get; set; }
    
    
    }
    
    /// <summary>Fare details of the segment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FareDetailsBySegment 
    {
        /// <summary>Id of the segment</summary>
        [Newtonsoft.Json.JsonProperty("segmentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SegmentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cabin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelClass? Cabin { get; set; }
    
        /// <summary>Fare basis specifying the rules of a fare. Usually, though not always, is composed of the booking class code followed by a set of letters and digits representing other characteristics of the ticket, such as refundability, minimum stay requirements, discounts or special promotional elements.</summary>
        [Newtonsoft.Json.JsonProperty("fareBasis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[[A-Z0-9]{1,18}")]
        public string FareBasis { get; set; }
    
        /// <summary>The name of the Fare Family corresponding to the fares. Only for the GDS provider and if the airline has fare families filled</summary>
        [Newtonsoft.Json.JsonProperty("brandedFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandedFare { get; set; }
    
        /// <summary>The code of the booking class, a.k.a. class of service or Reservations/Booking Designator (RBD)</summary>
        [Newtonsoft.Json.JsonProperty("class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{1}")]
        public string Class { get; set; }
    
        /// <summary>True if the corresponding booking class is in an allotment</summary>
        [Newtonsoft.Json.JsonProperty("isAllotment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAllotment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allotmentDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AllotmentDetails AllotmentDetails { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sliceDiceIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SliceDiceIndicator? SliceDiceIndicator { get; set; }
    
        /// <summary>Details of the included checked bags</summary>
        [Newtonsoft.Json.JsonProperty("includedCheckedBags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaggageAllowance IncludedCheckedBags { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalServices2 AdditionalServices { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AllotmentDetails 
    {
        [Newtonsoft.Json.JsonProperty("tourName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TourName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tourReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TourReference { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalServices2 
    {
        /// <summary>Details of chargeable checked bags</summary>
        [Newtonsoft.Json.JsonProperty("chargeableCheckedBags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaggageAllowance ChargeableCheckedBags { get; set; }
    
        /// <summary>seat number</summary>
        [Newtonsoft.Json.JsonProperty("chargeableSeatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[1-9][0-9]{0,2}[A-Z]?")]
        public string ChargeableSeatNumber { get; set; }
    
        /// <summary>Other services to add</summary>
        [Newtonsoft.Json.JsonProperty("otherServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ServiceName> OtherServices { get; set; }
    
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108