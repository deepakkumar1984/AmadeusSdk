//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace AmadeusSdk.FlightCreateOrders
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class Client
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Create Order associated to the Flight offers.</summary>
        /// <param name="body">list of element needed to book a flight Order</param>
        /// <returns>Successful Operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Success_Booking> CreateFligtOrdersAsync(FlightOrderQuery body)
        {
            return CreateFligtOrdersAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Order associated to the Flight offers.</summary>
        /// <param name="body">list of element needed to book a flight Order</param>
        /// <returns>Successful Operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Success_Booking> CreateFligtOrdersAsync(FlightOrderQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("booking/flight-orders");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.amadeus+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.amadeus+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Success_Booking>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error_400>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Error_400>("code    | title                                 \n------- | ------------------------------------- \n477     | INVALID FORMAT\n1304    | CREDIT CARD NOT ACCEPTED\n2781    | INVALID LENGTH\n4926    | INVALID DATA RECEIVED\n9112    | TICKETING - TKT\n2668    | PARAMETER COMBINATION INVALID/RESTRICTED\n32171   | MANDATORY DATA MISSING\n34107   | NOT APPLICABLE FARE\n34651   | SEGMENT SELL FAILURE\n34733   | VIRTUAL CARD CREATION FAILED\n36870   | BOOKING FAILED\n37200   | PRICE DISCREPANCY\n38034   | ONE OR MORE SERVICES ARE NOT AVAILABLE\n", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error_500>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Error_500>("Unexpected error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Error_400 
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Issue> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Issue>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Error_500 
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Issue> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Issue>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Issue 
    {
        /// <summary>the HTTP status code applicable to this error</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        /// <summary>an application-specific error code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Code { get; set; }
    
        /// <summary>a short summary of the error</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>explanation of the error</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        /// <summary>an object containing references to the source of the error</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Source Source { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Collection_Meta_Link 
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LocationEntry 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AircraftEntry 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CurrencyEntry 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CarrierEntry 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>defining a flight segment; including both operating and marketing details when applicable</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightSegment 
    {
        [Newtonsoft.Json.JsonProperty("departure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlightEndPoint Departure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("arrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlightEndPoint Arrival { get; set; }
    
        /// <summary>providing the airline / carrier code</summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string CarrierCode { get; set; }
    
        /// <summary>the flight number as assigned by the carrier</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string Number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aircraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AircraftEquipment Aircraft { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperatingFlight Operating { get; set; }
    
        /// <summary>stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        /// <summary>information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...</summary>
        [Newtonsoft.Json.JsonProperty("stops", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FlightStop> Stops { get; set; }
    
    
    }
    
    /// <summary>departure or arrival information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OriginalFlightEndPoint 
    {
        /// <summary>[IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx)</summary>
        [Newtonsoft.Json.JsonProperty("iataCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IataCode { get; set; }
    
        /// <summary>terminal name / number</summary>
        [Newtonsoft.Json.JsonProperty("terminal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Terminal { get; set; }
    
    
    }
    
    /// <summary>departure or arrival information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightEndPoint : OriginalFlightEndPoint
    {
        /// <summary>local date and time in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00</summary>
        [Newtonsoft.Json.JsonProperty("at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? At { get; set; }
    
    
    }
    
    /// <summary>details of stops for direct or change of gauge flights</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OriginalFlightStop 
    {
        /// <summary>[IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx)</summary>
        [Newtonsoft.Json.JsonProperty("iataCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IataCode { get; set; }
    
        /// <summary>stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
    
    }
    
    /// <summary>details of stops for direct or change of gauge flights</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightStop : OriginalFlightStop
    {
        /// <summary>arrival at the stop in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00</summary>
        [Newtonsoft.Json.JsonProperty("arrivalAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ArrivalAt { get; set; }
    
        /// <summary>departure from the stop in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00</summary>
        [Newtonsoft.Json.JsonProperty("departureAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DepartureAt { get; set; }
    
    
    }
    
    /// <summary>information related to the aircraft</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AircraftEquipment 
    {
        /// <summary>IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{3}")]
        public string Code { get; set; }
    
    
    }
    
    /// <summary>information about the operating flight</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OperatingFlight 
    {
        /// <summary>providing the airline / carrier code</summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string CarrierCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Price 
    {
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }
    
        /// <summary>Total amount paid by the user</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Total { get; set; }
    
        /// <summary>Amount without taxes</summary>
        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Base { get; set; }
    
        /// <summary>List of applicable fees</summary>
        [Newtonsoft.Json.JsonProperty("fees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Fee> Fees { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Tax> Taxes { get; set; }
    
        /// <summary>The amount of taxes which are refundable</summary>
        [Newtonsoft.Json.JsonProperty("refundableTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefundableTaxes { get; set; }
    
    
    }
    
    /// <summary>price information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Extended_Price : Price
    {
        /// <summary>BOOK step ONLY - The price margin percentage (plus or minus) that the booking can tolerate. When set to 0, then no price magin is tolerated.</summary>
        [Newtonsoft.Json.JsonProperty("margin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Margin { get; set; }
    
        /// <summary>Total amount paid by the user (including fees and selected additional services).</summary>
        [Newtonsoft.Json.JsonProperty("grandTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GrandTotal { get; set; }
    
        /// <summary>Currency of the payment. It may be different than the requested currency</summary>
        [Newtonsoft.Json.JsonProperty("billingCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingCurrency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalServices> AdditionalServices { get; set; }
    
    
    }
    
    /// <summary>a fee</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Fee 
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeType? Type { get; set; }
    
    
    }
    
    /// <summary>type of fee</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum FeeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TICKETING")]
        TICKETING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FORM_OF_PAYMENT")]
        FORM_OF_PAYMENT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUPPLIER")]
        SUPPLIER = 2,
    
    }
    
    /// <summary>a tax</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Tax 
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
    
    }
    
    /// <summary>quality of service offered in the cabin where the seat is located in this flight. Economy, premium economy, business or first class</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TravelClass
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ECONOMY")]
        ECONOMY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PREMIUM_ECONOMY")]
        PREMIUM_ECONOMY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FIRST")]
        FIRST = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Co2Emission 
    {
        /// <summary>Weight of Co2 emitted for the concerned segment</summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Weight { get; set; }
    
        /// <summary>Code to qualify unit as pounds or kilos</summary>
        [Newtonsoft.Json.JsonProperty("weightUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cabin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelClass? Cabin { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightOffer 
    {
        /// <summary>the resource name</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        /// <summary>Id of the flight offer</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FlightOfferSource Source { get; set; }
    
        /// <summary>If true, inform that a ticketing will be required at booking step.</summary>
        [Newtonsoft.Json.JsonProperty("instantTicketingRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InstantTicketingRequired { get; set; }
    
        /// <summary>BOOK step ONLY - If true, allows to book a PNR without pricing. Only for the source "GDS"</summary>
        [Newtonsoft.Json.JsonProperty("disablePricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisablePricing { get; set; }
    
        /// <summary>If true, upon completion of the booking, this pricing solution is expected to yield multiple records (a record contains booking information confirmed and stored, typically a Passenger Name Record (PNR), in the provider GDS or system)</summary>
        [Newtonsoft.Json.JsonProperty("nonHomogeneous", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NonHomogeneous { get; set; }
    
        /// <summary>If true, the flight offer fulfills only one originDestination and has to be combined with other oneWays to complete the whole journey.</summary>
        [Newtonsoft.Json.JsonProperty("oneWay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OneWay { get; set; }
    
        /// <summary>If true, a payment card is mandatory to book this flight offer</summary>
        [Newtonsoft.Json.JsonProperty("paymentCardRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PaymentCardRequired { get; set; }
    
        /// <summary>If booked on the same day as the search (with respect to timezone), this flight offer is guaranteed to be thereafter valid for ticketing until this date (included). Unspecified when it does not make sense for this flight offer (e.g. no control over ticketing once booked). YYYY-MM-DD format, e.g. 2019-06-07</summary>
        [Newtonsoft.Json.JsonProperty("lastTicketingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastTicketingDate { get; set; }
    
        /// <summary>Number of seats bookable in a single request. Can not be higher than 9.</summary>
        [Newtonsoft.Json.JsonProperty("numberOfBookableSeats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1D, 9D)]
        public double? NumberOfBookableSeats { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itineraries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(250)]
        public System.Collections.Generic.ICollection<Itineraries> Itineraries { get; set; }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Extended_Price Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pricingOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PricingOptions PricingOptions { get; set; }
    
        /// <summary>This option ensures that the system will only consider these airlines.</summary>
        [Newtonsoft.Json.JsonProperty("validatingAirlineCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(9)]
        public System.Collections.Generic.ICollection<string> ValidatingAirlineCodes { get; set; }
    
        /// <summary>Fare information for each traveler/segment</summary>
        [Newtonsoft.Json.JsonProperty("travelerPricings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(18)]
        public System.Collections.Generic.ICollection<TravelerPricings> TravelerPricings { get; set; }
    
        /// <summary>Fare rules of the flight offer</summary>
        [Newtonsoft.Json.JsonProperty("fareRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FareRules FareRules { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Segment : FlightSegment
    {
        /// <summary>Id of the segment</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Number of stops</summary>
        [Newtonsoft.Json.JsonProperty("numberOfStops", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfStops { get; set; }
    
        /// <summary>When the flight has a marketing or/and operating airline that is identified as blacklisted by the European Commission. 
        /// 
        /// To improve travel safety, the European Commission regularly updates the list of the banned carriers from operating in Europe. It allows any Travel Agency located in the European Union to easily identify and hide any travel recommendation based on some unsafe airlines. 
        /// The [list of the banned airlines](https://ec.europa.eu/transport/sites/transport/files/air-safety-list_en.pdf) is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline   
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blacklistedInEU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BlacklistedInEU { get; set; }
    
        /// <summary>Co2 informations</summary>
        [Newtonsoft.Json.JsonProperty("co2Emissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Co2Emission> Co2Emissions { get; set; }
    
    
    }
    
    /// <summary>traveler type
    /// age restrictions : CHILD &lt; 12y, HELD_INFANT &lt; 2y, SEATED_INFANT &lt; 2y, SENIOR &gt;=60y
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TravelerType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ADULT")]
        ADULT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHILD")]
        CHILD = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENIOR")]
        SENIOR = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"YOUNG")]
        YOUNG = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HELD_INFANT")]
        HELD_INFANT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEATED_INFANT")]
        SEATED_INFANT = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STUDENT")]
        STUDENT = 6,
    
    }
    
    /// <summary>additional service type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum AdditionalServiceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CHECKED_BAGS")]
        CHECKED_BAGS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEALS")]
        MEALS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEATS")]
        SEATS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER_SERVICES")]
        OTHER_SERVICES = 3,
    
    }
    
    /// <summary>source of the flight offer</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum FlightOfferSource
    {
        [System.Runtime.Serialization.EnumMember(Value = @"GDS")]
        GDS = 0,
    
    }
    
    /// <summary>type of fare of the flight-offer</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PricingOptionsFareType : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>option specifying a group of fares, which may be valid under certain conditons
    /// Can be used to specify special fare discount for a passenger
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TravelerPricingFareOption
    {
        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INCLUSIVE_TOUR")]
        INCLUSIVE_TOUR = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_MELILLA_RESIDENT")]
        SPANISH_MELILLA_RESIDENT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_CEUTA_RESIDENT")]
        SPANISH_CEUTA_RESIDENT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_CANARY_RESIDENT")]
        SPANISH_CANARY_RESIDENT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_BALEARIC_RESIDENT")]
        SPANISH_BALEARIC_RESIDENT = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_METROPOLITAN_DISCOUNT_PASS")]
        AIR_FRANCE_METROPOLITAN_DISCOUNT_PASS = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_DOM_DISCOUNT_PASS")]
        AIR_FRANCE_DOM_DISCOUNT_PASS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_COMBINED_DISCOUNT_PASS")]
        AIR_FRANCE_COMBINED_DISCOUNT_PASS = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_FAMILY")]
        AIR_FRANCE_FAMILY = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADULT_WITH_COMPANION")]
        ADULT_WITH_COMPANION = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPANION")]
        COMPANION = 11,
    
    }
    
    /// <summary>slice and Dice indicator, such as Local Availability, Sub OnD(Origin and Destination) 1 Availability and Sub OnD 2 Availability</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum SliceDiceIndicator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LOCAL_AVAILABILITY")]
        LOCAL_AVAILABILITY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUB_OD_AVAILABILITY_1")]
        SUB_OD_AVAILABILITY_1 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUB_OD_AVAILABILITY_2")]
        SUB_OD_AVAILABILITY_2 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Dictionaries 
    {
        [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationEntry Locations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aircraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AircraftEntry Aircraft { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyEntry Currencies { get; set; }
    
        [Newtonsoft.Json.JsonProperty("carriers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CarrierEntry Carriers { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LocationValue 
    {
        /// <summary>City code associated to the airport</summary>
        [Newtonsoft.Json.JsonProperty("cityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CityCode { get; set; }
    
        /// <summary>Country code of the airport</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FareRules 
    {
        /// <summary>The currency of the penalties</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<TermAndCondition> Rules { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TermAndCondition 
    {
        /// <summary>This defines what type of modification is concerned in this rule.</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TermAndConditionCategory? Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("circumstances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Circumstances { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notApplicable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotApplicable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxPenaltyAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaxPenaltyAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Descriptions> Descriptions { get; set; }
    
    
    }
    
    /// <summary>elementaryPrice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ElementaryPrice 
    {
        /// <summary>Amount of the fare. could be alpha numeric. Ex- 500.20 or 514.13A, 'A'signifies additional collection.</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        /// <summary>Currency type of the fare.</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }
    
    
    }
    
    /// <summary>baggageAllowance</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BaggageAllowance 
    {
        /// <summary>Total number of units</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }
    
        /// <summary>Weight of the baggage allowance</summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Weight { get; set; }
    
        /// <summary>Code to qualify unit as pounds or kilos</summary>
        [Newtonsoft.Json.JsonProperty("weightUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WeightUnit { get; set; }
    
    
    }
    
    /// <summary>type of service</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ServiceName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRIORITY_BOARDING")]
        PRIORITY_BOARDING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIRPORT_CHECKIN")]
        AIRPORT_CHECKIN = 1,
    
    }
    
    /// <summary>input parameter to create a flight order</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightOrder 
    {
        /// <summary>the resource name</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        /// <summary>unique identifier of the flight order</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>office Id where to queue the order</summary>
        [Newtonsoft.Json.JsonProperty("queuingOfficeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueuingOfficeId { get; set; }
    
        /// <summary>office Id where will be transfered the ownership of the order</summary>
        [Newtonsoft.Json.JsonProperty("ownerOfficeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerOfficeId { get; set; }
    
        /// <summary>list of associated record</summary>
        [Newtonsoft.Json.JsonProperty("associatedRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AssociatedRecord> AssociatedRecords { get; set; }
    
        /// <summary>list of flight offer</summary>
        [Newtonsoft.Json.JsonProperty("flightOffers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(6)]
        public System.Collections.Generic.ICollection<FlightOffer> FlightOffers { get; set; } = new System.Collections.ObjectModel.Collection<FlightOffer>();
    
        /// <summary>list of travelers</summary>
        [Newtonsoft.Json.JsonProperty("travelers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(18)]
        public System.Collections.Generic.ICollection<Traveler> Travelers { get; set; }
    
        /// <summary>list of global remarks</summary>
        [Newtonsoft.Json.JsonProperty("remarks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Remarks Remarks { get; set; }
    
        /// <summary>list of form of payments</summary>
        [Newtonsoft.Json.JsonProperty("formOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(6)]
        public System.Collections.Generic.ICollection<FormOfPayment> FormOfPayments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ticketingAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TicketingAgreement TicketingAgreement { get; set; }
    
        /// <summary>list of automatic queuing</summary>
        [Newtonsoft.Json.JsonProperty("automatedProcess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(31)]
        public System.Collections.Generic.ICollection<AutomatedProcess> AutomatedProcess { get; set; }
    
        /// <summary>list of general contact information</summary>
        [Newtonsoft.Json.JsonProperty("contacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Contact> Contacts { get; set; }
    
        /// <summary>list of tickets</summary>
        [Newtonsoft.Json.JsonProperty("tickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AirTravelDocument> Tickets { get; set; }
    
    
    }
    
    /// <summary>stakeholder definition</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Stakeholder 
    {
        /// <summary>item identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The date of birth in ISO 8601 format (yyyy-mm-dd)</summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateOfBirth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StakeholderGender? Gender { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Name Name { get; set; }
    
        /// <summary>Advanced Passenger Information - regulatory identity documents - SSR DOCS &amp; DOCO elements</summary>
        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentityDocument> Documents { get; set; }
    
    
    }
    
    /// <summary>The gender</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum StakeholderGender
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MALE")]
        MALE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FEMALE")]
        FEMALE = 1,
    
    }
    
    /// <summary>documents of the traveler</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class IdentityDocument : Document
    {
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocumentType? DocumentType { get; set; }
    
        /// <summary>[ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country where the document is valid</summary>
        [Newtonsoft.Json.JsonProperty("validityCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{2}")]
        public string ValidityCountry { get; set; }
    
        /// <summary>[ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country of birth</summary>
        [Newtonsoft.Json.JsonProperty("birthCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{2}")]
        public string BirthCountry { get; set; }
    
        /// <summary>boolean to specify if the traveler is the holder of the document</summary>
        [Newtonsoft.Json.JsonProperty("holder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Holder { get; set; }
    
    
    }
    
    /// <summary>the information that are found on an ID document</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Document 
    {
        /// <summary>The document number (shown on the document) . E.g. QFU514563221J</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>Date at which the document has been issued.</summary>
        [Newtonsoft.Json.JsonProperty("issuanceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssuanceDate { get; set; }
    
        /// <summary>Date after which the document is not valid anymore.</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }
    
        /// <summary>[ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country that issued the document</summary>
        [Newtonsoft.Json.JsonProperty("issuanceCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{2}")]
        public string IssuanceCountry { get; set; }
    
        /// <summary>A more precise information concerning the place where the document has been issued, when available. It may be a country, a state, a city or any other type of location. e.g. New-York</summary>
        [Newtonsoft.Json.JsonProperty("issuanceLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuanceLocation { get; set; }
    
        /// <summary>[ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the nationality appearing on the document</summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{2}")]
        public string Nationality { get; set; }
    
        /// <summary>Birth place as indicated on the document</summary>
        [Newtonsoft.Json.JsonProperty("birthPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthPlace { get; set; }
    
    
    }
    
    /// <summary>the nature/type of the document</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum DocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"VISA")]
        VISA = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT")]
        PASSPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTITY_CARD")]
        IDENTITY_CARD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KNOWN_TRAVELER")]
        KNOWN_TRAVELER = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REDRESS")]
        REDRESS = 4,
    
    }
    
    /// <summary>emergency contact number</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class EmergencyContact 
    {
        /// <summary>Adressee name (e.g. in case of emergency purpose it corresponds to name of the person to be contacted).</summary>
        [Newtonsoft.Json.JsonProperty("addresseeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z -]")]
        public string AddresseeName { get; set; }
    
        /// <summary>Country code of the country (ISO3166-1). E.g. "US" for the United States</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2}")]
        public string CountryCode { get; set; }
    
        /// <summary>Phone number. Composed of digits only. The number of digits depends on the country.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{1,15}")]
        public string Number { get; set; }
    
        /// <summary>additional details</summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }
    
    
    }
    
    /// <summary>loyalty program information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LoyaltyProgram 
    {
        /// <summary>loyalty program airline code</summary>
        [Newtonsoft.Json.JsonProperty("programOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProgramOwner { get; set; }
    
        /// <summary>loyalty program number</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
    
    }
    
    /// <summary>traveler discount</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Discount 
    {
        [Newtonsoft.Json.JsonProperty("subType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiscountType? SubType { get; set; }
    
        /// <summary>city of residence</summary>
        [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CityName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("travelerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiscountTravelerType? TravelerType { get; set; }
    
        /// <summary>resident card number</summary>
        [Newtonsoft.Json.JsonProperty("cardNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9A-Z][0-9]{0,12}[A-Z]")]
        public string CardNumber { get; set; }
    
        /// <summary>resident certificate number</summary>
        [Newtonsoft.Json.JsonProperty("certificateNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9A-Z][0-9]{0,12}[A-Z]")]
        public string CertificateNumber { get; set; }
    
    
    }
    
    /// <summary>type of discount applied</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum DiscountType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_RESIDENT")]
        SPANISH_RESIDENT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_DOMESTIC")]
        AIR_FRANCE_DOMESTIC = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_COMBINED")]
        AIR_FRANCE_COMBINED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_METROPOLITAN")]
        AIR_FRANCE_METROPOLITAN = 3,
    
    }
    
    /// <summary>type of discount applied</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum DiscountTravelerType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_CITIZEN")]
        SPANISH_CITIZEN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EUROPEAN_CITIZEN")]
        EUROPEAN_CITIZEN = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GOVERNMENT_WORKER")]
        GOVERNMENT_WORKER = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MILITARY")]
        MILITARY = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MINOR_WITHOUT_ID")]
        MINOR_WITHOUT_ID = 4,
    
    }
    
    /// <summary>the traveler of the trip</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Traveler : Stakeholder
    {
        /// <summary>emergency contact</summary>
        [Newtonsoft.Json.JsonProperty("emergencyContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmergencyContact EmergencyContact { get; set; }
    
        /// <summary>list of loyalty program followed by the traveler</summary>
        [Newtonsoft.Json.JsonProperty("loyaltyPrograms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<LoyaltyProgram> LoyaltyPrograms { get; set; }
    
        /// <summary>list of element that allow a discount.</summary>
        [Newtonsoft.Json.JsonProperty("discountEligibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<Discount> DiscountEligibility { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }
    
    
    }
    
    /// <summary>contact information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Contact : ContactDictionary
    {
        /// <summary>Phone numbers</summary>
        [Newtonsoft.Json.JsonProperty("phones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(3)]
        public System.Collections.Generic.ICollection<Phone> Phones { get; set; }
    
        /// <summary>Name of the company</summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }
    
        /// <summary>Email address (e.g. john@smith.com)</summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
    
    }
    
    /// <summary>the purpose for which this contact is to be used</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ContactPurpose
    {
        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVOICE")]
        INVOICE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_WITHOUT_TRANSMISSION")]
        STANDARD_WITHOUT_TRANSMISSION = 2,
    
    }
    
    /// <summary>represents a contact</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ContactDictionary 
    {
        /// <summary>the name of the person addressed by these contact details</summary>
        [Newtonsoft.Json.JsonProperty("addresseeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Name AddresseeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContactPurpose? Purpose { get; set; }
    
    
    }
    
    /// <summary>name</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Name : BaseName
    {
        /// <summary>second last name</summary>
        [Newtonsoft.Json.JsonProperty("secondLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecondLastName { get; set; }
    
    
    }
    
    /// <summary>description of the name of a physical person</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BaseName 
    {
        /// <summary>First name.</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        /// <summary>Last name.</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        /// <summary>Middle name(s), for example "Lee" in "John Lee Smith".</summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MiddleName { get; set; }
    
    
    }
    
    /// <summary>phone information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Phone 
    {
        [Newtonsoft.Json.JsonProperty("deviceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhoneDeviceType? DeviceType { get; set; }
    
        /// <summary>Country calling code of the phone number, as defined by the International Communication Union. Examples - "1" for US, "371" for Latvia.</summary>
        [Newtonsoft.Json.JsonProperty("countryCallingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9+]{2,5}")]
        public string CountryCallingCode { get; set; }
    
        /// <summary>Phone number. Composed of digits only. The number of digits depends on the country.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{1,15}")]
        public string Number { get; set; }
    
    
    }
    
    /// <summary>Type of the device (Landline, Mobile or Fax)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum PhoneDeviceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MOBILE")]
        MOBILE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LANDLINE")]
        LANDLINE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAX")]
        FAX = 2,
    
    }
    
    /// <summary>address information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Address 
    {
        /// <summary>Line 1 = Street address, Line 2 = Apartment, suite, unit, building, floor, etc</summary>
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Lines { get; set; }
    
        /// <summary>Example: 74130</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>country code [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{2}")]
        public string CountryCode { get; set; }
    
        /// <summary>Full city name. Example: Dublin</summary>
        [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z -]{1,35}")]
        public string CityName { get; set; }
    
        /// <summary>Full state name</summary>
        [Newtonsoft.Json.JsonProperty("stateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateName { get; set; }
    
        /// <summary>E.g. BP 220</summary>
        [Newtonsoft.Json.JsonProperty("postalBox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalBox { get; set; }
    
    
    }
    
    /// <summary>ticketing agreement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TicketingAgreement 
    {
        [Newtonsoft.Json.JsonProperty("option", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TicketingAgreementOption? Option { get; set; }
    
        /// <summary>Delay before applying automatic process if no issuance in days</summary>
        [Newtonsoft.Json.JsonProperty("delay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Delay { get; set; }
    
        /// <summary>Exact date to apply automatic process if no issuance. YYYY-MM-DD format, e.g. 2019-06-07</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateTime { get; set; }
    
        /// <summary>Ids of the impacted segments</summary>
        [Newtonsoft.Json.JsonProperty("segmentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SegmentIds { get; set; }
    
    
    }
    
    /// <summary>ticketing agreement option</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TicketingAgreementOption
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRM")]
        CONFIRM = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DELAY_TO_QUEUE")]
        DELAY_TO_QUEUE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DELAY_TO_CANCEL")]
        DELAY_TO_CANCEL = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIRLINE_UNTICKETED_CANCELATION")]
        AIRLINE_UNTICKETED_CANCELATION = 3,
    
    }
    
    /// <summary>Provides information on ticketing arrangements and Amadeus Time Limits</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AutomatedProcessCommon 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AutomatedProcessCode? Code { get; set; }
    
        /// <summary>Identifies the queue onto which PNR must be automatically placed upon process execution.</summary>
        [Newtonsoft.Json.JsonProperty("queue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Queue Queue { get; set; }
    
        /// <summary>Free text</summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }
    
    
    }
    
    /// <summary>automatic process applied to the Order</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AutomatedProcess : AutomatedProcessCommon
    {
        /// <summary>Delay before applying process in days</summary>
        [Newtonsoft.Json.JsonProperty("delay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Delay { get; set; }
    
        /// <summary>Office into which the process must be triggered.</summary>
        [Newtonsoft.Json.JsonProperty("officeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficeId { get; set; }
    
        /// <summary>Datetime limit at which the process takes action in case issuance is not done.</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTime { get; set; }
    
    
    }
    
    /// <summary>queuing action to be taken</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum AutomatedProcessCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IMMEDIATE")]
        IMMEDIATE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DELAYED")]
        DELAYED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 2,
    
    }
    
    /// <summary>remarks</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Remarks 
    {
        /// <summary>list of general remarks</summary>
        [Newtonsoft.Json.JsonProperty("general", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(200)]
        public System.Collections.Generic.ICollection<GeneralRemark> General { get; set; }
    
        /// <summary>list of airline remarks</summary>
        [Newtonsoft.Json.JsonProperty("airline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(200)]
        public System.Collections.Generic.ICollection<AirlineRemark> Airline { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class GeneralRemark 
    {
        [Newtonsoft.Json.JsonProperty("subType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GeneralRemarkType SubType { get; set; }
    
        /// <summary>remark category</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{1}")]
        public string Category { get; set; }
    
        /// <summary>remark free text</summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; set; }
    
        /// <summary>Id of the concerned traveler</summary>
        [Newtonsoft.Json.JsonProperty("travelerIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TravelerIds { get; set; }
    
        /// <summary>Id of the concern flightOffers</summary>
        [Newtonsoft.Json.JsonProperty("flightOfferIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(6)]
        public System.Collections.Generic.ICollection<string> FlightOfferIds { get; set; }
    
    
    }
    
    /// <summary>general remark type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum GeneralRemarkType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_MISCELLANEOUS")]
        GENERAL_MISCELLANEOUS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONFIDENTIAL")]
        CONFIDENTIAL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVOICE")]
        INVOICE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QUALITY_CONTROL")]
        QUALITY_CONTROL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BACKOFFICE")]
        BACKOFFICE = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FULFILLMENT")]
        FULFILLMENT = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ITINERARY")]
        ITINERARY = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TICKETING_MISCELLANEOUS")]
        TICKETING_MISCELLANEOUS = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AirlineRemark 
    {
        [Newtonsoft.Json.JsonProperty("subType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AirlineRemarkType SubType { get; set; }
    
        /// <summary>keyword code - only applicable for subType Keyword</summary>
        [Newtonsoft.Json.JsonProperty("keyword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keyword { get; set; }
    
        /// <summary>Code of the airline following IATA standard ([IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx))
        /// 
        /// When it apply to any airline, value is YY.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("airlineCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AirlineCode { get; set; }
    
        /// <summary>remark free text</summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; set; }
    
        /// <summary>Id of the concerned traveler</summary>
        [Newtonsoft.Json.JsonProperty("travelerIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TravelerIds { get; set; }
    
        /// <summary>Id of the concern flightOffers</summary>
        [Newtonsoft.Json.JsonProperty("flightOfferIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(6)]
        public System.Collections.Generic.ICollection<string> FlightOfferIds { get; set; }
    
    
    }
    
    /// <summary>airline remark type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum AirlineRemarkType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER_SERVICE_INFORMATION")]
        OTHER_SERVICE_INFORMATION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KEYWORD")]
        KEYWORD = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER_SERVICE")]
        OTHER_SERVICE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID")]
        CLIENT_ID = 3,
    
    }
    
    /// <summary>form of payment used</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FormOfPayment 
    {
        /// <summary>payment with the solution B2B Wallet</summary>
        [Newtonsoft.Json.JsonProperty("b2bWallet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public B2bWallet B2bWallet { get; set; }
    
        /// <summary>payment with a credit card</summary>
        [Newtonsoft.Json.JsonProperty("creditCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditCard CreditCard { get; set; }
    
        /// <summary>payment with an other method</summary>
        [Newtonsoft.Json.JsonProperty("other", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherMethod Other { get; set; }
    
    
    }
    
    /// <summary>b2b wallet</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class B2bWallet 
    {
        /// <summary>card identifier</summary>
        [Newtonsoft.Json.JsonProperty("cardId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CardId { get; set; }
    
        /// <summary>card usage name</summary>
        [Newtonsoft.Json.JsonProperty("cardUsageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CardUsageName { get; set; }
    
        /// <summary>card name</summary>
        [Newtonsoft.Json.JsonProperty("cardFriendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1,35}")]
        public string CardFriendlyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reportingData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReportingData> ReportingData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("virtualCreditCardDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VirtualCreditCardDetails VirtualCreditCardDetails { get; set; }
    
        /// <summary>Id of the concern flightOffers</summary>
        [Newtonsoft.Json.JsonProperty("flightOfferIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(6)]
        public System.Collections.Generic.ICollection<string> FlightOfferIds { get; set; }
    
    
    }
    
    /// <summary>detail information of the virtual card</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VirtualCreditCardDetails : CreditCardCommon
    {
        /// <summary>Amount of the fare. could be alpha numeric. Ex- 500.20 or 514.13A, 'A'signifies additional collection.</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        /// <summary>Currency type of the fare.</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }
    
    
    }
    
    /// <summary>credit card</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CreditCard : CreditCardCommon
    {
        /// <summary>card security code</summary>
        [Newtonsoft.Json.JsonProperty("securityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecurityCode { get; set; }
    
        /// <summary>Id of the concern flightOffers</summary>
        [Newtonsoft.Json.JsonProperty("flightOfferIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(6)]
        public System.Collections.Generic.ICollection<string> FlightOfferIds { get; set; }
    
    
    }
    
    /// <summary>credit card common attribute</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CreditCardCommon 
    {
        [Newtonsoft.Json.JsonProperty("brand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreditCardBrand? Brand { get; set; }
    
        /// <summary>card holder as on the card</summary>
        [Newtonsoft.Json.JsonProperty("holder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Holder { get; set; }
    
        /// <summary>card number</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1,35}")]
        public string Number { get; set; }
    
        /// <summary>credit card expiration date following [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) (YYYY-MM format, e.g. 2012-08)</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpiryDate { get; set; }
    
    
    }
    
    /// <summary>credit card brand</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum CreditCardBrand
    {
        [System.Runtime.Serialization.EnumMember(Value = @"VISA")]
        VISA = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AMERICAN_EXPRESS")]
        AMERICAN_EXPRESS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MASTERCARD")]
        MASTERCARD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VISA_ELECTRON")]
        VISA_ELECTRON = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VISA_DEBIT")]
        VISA_DEBIT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MASTERCARD_DEBIT")]
        MASTERCARD_DEBIT = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MAESTRO")]
        MAESTRO = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DINERS")]
        DINERS = 7,
    
    }
    
    /// <summary>other payment method</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OtherMethod 
    {
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OtherPaymentMethod? Method { get; set; }
    
        /// <summary>Id of the concern flightOffers</summary>
        [Newtonsoft.Json.JsonProperty("flightOfferIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(6)]
        public System.Collections.Generic.ICollection<string> FlightOfferIds { get; set; }
    
    
    }
    
    /// <summary>other payment method</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum OtherPaymentMethod
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT")]
        ACCOUNT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHECK")]
        CHECK = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CASH")]
        CASH = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NONREFUNDABLE")]
        NONREFUNDABLE = 3,
    
    }
    
    /// <summary>describes the relation between the current reservation and another one</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AssociatedRecordCommon 
    {
        /// <summary>Record locator [Amadeus or OA] with which the current reservation is related. In case of a codeshare relation, it enables to identify the operating PNR.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>Creation date of the referenced reservation. Date and time in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss.sss format, e.g. 2019-07-09T12:30:00.000</summary>
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreationDate { get; set; }
    
        /// <summary>Designates the system which has originated the referenced reservation.</summary>
        [Newtonsoft.Json.JsonProperty("originSystemCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 2)]
        public string OriginSystemCode { get; set; }
    
    
    }
    
    /// <summary>record associated to the order</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AssociatedRecord : AssociatedRecordCommon
    {
        /// <summary>id of the impacted flight offer</summary>
        [Newtonsoft.Json.JsonProperty("flightOfferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FlightOfferId { get; set; }
    
    
    }
    
    /// <summary>ticket information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AirTravelDocument : AirTravelDocumentCommon
    {
        /// <summary>id of the impacted traveler</summary>
        [Newtonsoft.Json.JsonProperty("travelerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TravelerId { get; set; }
    
        /// <summary>Ids of the impacted segments</summary>
        [Newtonsoft.Json.JsonProperty("segmentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SegmentIds { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AirTravelDocumentCommon 
    {
        /// <summary>Type of the travel document</summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AirTravelDocumentCommonDocumentType? DocumentType { get; set; }
    
        /// <summary>Identifier of the travel document prefixed by its owner code [NALC - 3 digits]. Can either be a primary or a conjunctive document number. Necessary for TicketingReference definition.</summary>
        [Newtonsoft.Json.JsonProperty("documentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentNumber { get; set; }
    
        /// <summary>Status of the travel document contained in the fare element</summary>
        [Newtonsoft.Json.JsonProperty("documentStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AirTravelDocumentCommonDocumentStatus? DocumentStatus { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FlightOrderQuery 
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlightOrder Data { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Success_Booking 
    {
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Collection_Meta_Link Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Issue> Warnings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FlightOrder Data { get; set; } = new FlightOrder();
    
        [Newtonsoft.Json.JsonProperty("dictionaries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dictionaries Dictionaries { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Source 
    {
        /// <summary>a JSON Pointer [RFC6901] to the associated entity in the request document</summary>
        [Newtonsoft.Json.JsonProperty("pointer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pointer { get; set; }
    
        /// <summary>a string indicating which URI query parameter caused the issue</summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }
    
        /// <summary>a string indicating an example of the right value</summary>
        [Newtonsoft.Json.JsonProperty("example", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Example { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Links 
    {
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }
    
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Next { get; set; }
    
        [Newtonsoft.Json.JsonProperty("previous", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Previous { get; set; }
    
        [Newtonsoft.Json.JsonProperty("last", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Last { get; set; }
    
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri First { get; set; }
    
        [Newtonsoft.Json.JsonProperty("up", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Up { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalServices 
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdditionalServiceType? Type { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Itineraries 
    {
        /// <summary>duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M for a duration of 2h10m</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("segments", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(9)]
        public System.Collections.Generic.ICollection<Segment> Segments { get; set; } = new System.Collections.ObjectModel.Collection<Segment>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PricingOptions 
    {
        /// <summary>type of fare of the flight-offer</summary>
        [Newtonsoft.Json.JsonProperty("fareType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PricingOptionsFareType FareType { get; set; }
    
        /// <summary>Allow Corporate negotiated fares using one or more corporate number (corporate code).</summary>
        [Newtonsoft.Json.JsonProperty("corporateCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CorporateCodes { get; set; }
    
        /// <summary>If true, returns the flight-offers with included checked bags only</summary>
        [Newtonsoft.Json.JsonProperty("includedCheckedBagsOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludedCheckedBagsOnly { get; set; }
    
        /// <summary>If true, returns the flight-offers with refundable fares only</summary>
        [Newtonsoft.Json.JsonProperty("refundableFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RefundableFare { get; set; }
    
        /// <summary>If true, returns the flight-offers with no restriction fares only</summary>
        [Newtonsoft.Json.JsonProperty("noRestrictionFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoRestrictionFare { get; set; }
    
        /// <summary>If true, returns the flight-offers with no penalty fares only</summary>
        [Newtonsoft.Json.JsonProperty("noPenaltyFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoPenaltyFare { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TravelerPricings 
    {
        /// <summary>Id of the traveler</summary>
        [Newtonsoft.Json.JsonProperty("travelerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TravelerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fareOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelerPricingFareOption? FareOption { get; set; }
    
        [Newtonsoft.Json.JsonProperty("travelerType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelerType TravelerType { get; set; }
    
        /// <summary>if type="HELD_INFANT", corresponds to the adult traveler's id who will share the seat</summary>
        [Newtonsoft.Json.JsonProperty("associatedAdultId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssociatedAdultId { get; set; }
    
        /// <summary>price detail of the traveler</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Price Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fareDetailsBySegment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(18)]
        public System.Collections.Generic.ICollection<FareDetailsBySegment> FareDetailsBySegment { get; set; } = new System.Collections.ObjectModel.Collection<FareDetailsBySegment>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PUBLISHED")]
        PUBLISHED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NEGOTIATED")]
        NEGOTIATED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CORPORATE")]
        CORPORATE = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TermAndConditionCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"REFUND")]
        REFUND = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXCHANGE")]
        EXCHANGE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REVALIDATION")]
        REVALIDATION = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REISSUE")]
        REISSUE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REBOOK")]
        REBOOK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLATION")]
        CANCELLATION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Descriptions 
    {
        [Newtonsoft.Json.JsonProperty("descriptionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescriptionType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Queue 
    {
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ReportingData 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum AirTravelDocumentCommonDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ETICKET")]
        ETICKET = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PTICKET")]
        PTICKET = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EMD")]
        EMD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MCO")]
        MCO = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum AirTravelDocumentCommonDocumentStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ISSUED")]
        ISSUED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUNDED")]
        REFUNDED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VOID")]
        VOID = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ORIGINAL")]
        ORIGINAL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXCHANGED")]
        EXCHANGED = 4,
    
    }
    
    /// <summary>Fare details of the segment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FareDetailsBySegment 
    {
        /// <summary>Id of the segment</summary>
        [Newtonsoft.Json.JsonProperty("segmentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SegmentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cabin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelClass? Cabin { get; set; }
    
        /// <summary>Fare basis specifying the rules of a fare. Usually, though not always, is composed of the booking class code followed by a set of letters and digits representing other characteristics of the ticket, such as refundability, minimum stay requirements, discounts or special promotional elements.</summary>
        [Newtonsoft.Json.JsonProperty("fareBasis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[[A-Z0-9]{1,18}")]
        public string FareBasis { get; set; }
    
        /// <summary>The name of the Fare Family corresponding to the fares. Only for the GDS provider and if the airline has fare families filled</summary>
        [Newtonsoft.Json.JsonProperty("brandedFare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandedFare { get; set; }
    
        /// <summary>The code of the booking class, a.k.a. class of service or Reservations/Booking Designator (RBD)</summary>
        [Newtonsoft.Json.JsonProperty("class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{1}")]
        public string Class { get; set; }
    
        /// <summary>True if the corresponding booking class is in an allotment</summary>
        [Newtonsoft.Json.JsonProperty("isAllotment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAllotment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allotmentDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AllotmentDetails AllotmentDetails { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sliceDiceIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SliceDiceIndicator? SliceDiceIndicator { get; set; }
    
        /// <summary>Details of the included checked bags</summary>
        [Newtonsoft.Json.JsonProperty("includedCheckedBags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaggageAllowance IncludedCheckedBags { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalServices2 AdditionalServices { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AllotmentDetails 
    {
        [Newtonsoft.Json.JsonProperty("tourName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TourName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tourReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TourReference { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalServices2 
    {
        /// <summary>Details of chargeable checked bags</summary>
        [Newtonsoft.Json.JsonProperty("chargeableCheckedBags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaggageAllowance ChargeableCheckedBags { get; set; }
    
        /// <summary>seat number</summary>
        [Newtonsoft.Json.JsonProperty("chargeableSeatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[1-9][0-9]{0,2}[A-Z]?")]
        public string ChargeableSeatNumber { get; set; }
    
        /// <summary>Other services to add</summary>
        [Newtonsoft.Json.JsonProperty("otherServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ServiceName> OtherServices { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108