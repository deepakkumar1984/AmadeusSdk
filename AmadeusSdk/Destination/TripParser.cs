//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace AmadeusSdk.TripParser
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class Client
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Creates a new Trip Parser Job.</summary>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Success_TripParserJob> CreateTripParserJobAsync(Body_TripParserJob body)
        {
            return CreateTripParserJobAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new Trip Parser Job.</summary>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Success_TripParserJob> CreateTripParserJobAsync(Body_TripParserJob body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("travel/trip-parser-jobs");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.amadeus+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.amadeus+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Success_TripParserJob>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error_400>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Error_400>("\n** Error Codes **\n\ncode    | title                                 \n------- | -------------------------------------                        \n477     | INVALID FORMAT\n572     | INVALID OPTION \t                       \n4926    | INVALID DATA RECEIVED \t        \n32171   | MANDATORY DATA MISSING \t        \n", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error_401>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Error_401>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error_500>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Error_500>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieves a Parser Job by its Id.</summary>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Success_TripParserJob2> GetTripParserJobAsync(string jobId)
        {
            return GetTripParserJobAsync(jobId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves a Parser Job by its Id.</summary>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Success_TripParserJob2> GetTripParserJobAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("travel/trip-parser-jobs/{jobId}");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.amadeus+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Success_TripParserJob2>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error_400>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Error_400>("** Error Codes **\n\ncode    | title                                 \n------- | ------------------------------------- \n 572    | INVALID OPTION\t        \n", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error_401>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Error_401>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error_404>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Error_404>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error_500>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Error_500>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieves the result of the trip parser job.</summary>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Success_Result> GetResultAsync(string jobId)
        {
            return GetResultAsync(jobId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the result of the trip parser job.</summary>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Success_Result> GetResultAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("travel/trip-parser-jobs/{jobId}/result");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.amadeus+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Success_Result>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error_400>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Error_400>("** Error Codes **\n\ncode    | title                                 \n------- | ------------------------------------- \n 572    | INVALID OPTION\n  \t        \n", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error_401>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Error_401>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error_404>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Error_404>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error_500>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Error_500>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TripParserJob_in 
    {
        /// <summary>the resource name</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        /// <summary>item identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>content of the travel email in base64 format. To be present only as input in case of post operation.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Self { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TripParserJob_out 
    {
        /// <summary>the resource name</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        /// <summary>item identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TripParserJob_outStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relationship Result { get; set; }
    
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Self { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Error_400 
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Issue> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Issue>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Error_401 
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Issue> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Issue>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Error_404 
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Issue> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Issue>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Error_500 
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Issue> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Issue>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Issue 
    {
        /// <summary>the HTTP status code applicable to this error</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        /// <summary>an application-specific error code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Code { get; set; }
    
        /// <summary>a short summary of the error</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>explanation of the error</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        /// <summary>an object containing references to the source of the error</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Source Source { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Links 
    {
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Href { get; set; }
    
        [Newtonsoft.Json.JsonProperty("methods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Methods> Methods { get; set; }
    
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Relationship 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Href { get; set; }
    
        [Newtonsoft.Json.JsonProperty("methods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Methods2> Methods { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AggregatedTrip : Trip
    {
        /// <summary>the resource name</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>item identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Self { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stakeholders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Stakeholder> Stakeholders { get; set; }
    
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Product> Products { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Trip 
    {
        /// <summary>the resource name (`trip`)</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>item identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Self { get; set; }
    
        /// <summary>Reference of the Trip</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-f0-9]{6,10}")]
        public string Reference { get; set; }
    
        /// <summary>Identifier of the trip in an external system (e.g. GLC)</summary>
        [Newtonsoft.Json.JsonProperty("externalID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string ExternalID { get; set; }
    
        /// <summary>Creation date and office Id of the Trip</summary>
        [Newtonsoft.Json.JsonProperty("creation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creation Creation { get; set; }
    
        /// <summary>Modification date and office Id of the Trip</summary>
        [Newtonsoft.Json.JsonProperty("modification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creation Modification { get; set; }
    
        /// <summary>Owner office of the Trip</summary>
        [Newtonsoft.Json.JsonProperty("ownerOffice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creation OwnerOffice { get; set; }
    
        /// <summary>Trip label or name</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Title { get; set; }
    
        /// <summary>Trip description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string Description { get; set; }
    
        /// <summary>Business or Leisure</summary>
        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string Purpose { get; set; }
    
        /// <summary>Public or private</summary>
        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string Privacy { get; set; }
    
        /// <summary>Trip Departure information</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TripPoint Start { get; set; }
    
        /// <summary>locations where a significant stop is performed.</summary>
        [Newtonsoft.Json.JsonProperty("itinerary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(99)]
        public System.Collections.Generic.ICollection<Itinerary> Itinerary { get; set; }
    
        /// <summary>Trip destination information</summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TripPoint To { get; set; }
    
        /// <summary>Trip Arrival information</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TripPoint End { get; set; }
    
        [Newtonsoft.Json.JsonProperty("travelAgency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TravelAgency TravelAgency { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Creation 
    {
        /// <summary>Date of the trip point optional time and time offset in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("office", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Office Office { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Office 
    {
        /// <summary>the office id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CityCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("regionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegionCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Stakeholder 
    {
        /// <summary>The 3 characters long Passenger Type Code of the traveller (e.g ADT, CHD...)</summary>
        [Newtonsoft.Json.JsonProperty("PTC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string PTC { get; set; }
    
        /// <summary>The type of staff of the stakeholder (e.g BKB or SBY)</summary>
        [Newtonsoft.Json.JsonProperty("staffType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StaffType { get; set; }
    
        /// <summary>The date of birth of the stakeholder</summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateOfBirth { get; set; }
    
        /// <summary>The age of the stakeholder, made of a number from one to three characters long followed by the letter Y (e.g 5Y, 011Y, 59Y, ...)</summary>
        [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Age { get; set; }
    
        /// <summary>CBBG (Cabin Baggage) or EXST (Extra Seat)</summary>
        [Newtonsoft.Json.JsonProperty("specialSeat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpecialSeat { get; set; }
    
        /// <summary>ID or CR field, must start with ID or CR followed by alphanumeric characters (e.g ID10152307, CR1234AA,...)</summary>
        [Newtonsoft.Json.JsonProperty("identificationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationCode { get; set; }
    
        /// <summary>The list of roles of the Stakeholder among Traveller, Buyer and Payer. Currently only Traveller role is supported. If no input is provided, the system shall default to Traveller role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<Roles> Roles { get; set; }
    
        /// <summary>The nationality of the Stakeholder</summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nationality { get; set; }
    
        /// <summary>Name of the Stakeholder. The full name of the stakeholder, including PTC, staffType dateOfBirthf and specialSeat must remain below 59 characters
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(5)]
        public System.Collections.Generic.ICollection<Name> Names { get; set; }
    
    
    }
    
    /// <summary>description of the name of a physical person</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Name 
    {
        /// <summary>The type of the Name</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Reference Name</summary>
        [Newtonsoft.Json.JsonProperty("isRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRef { get; set; }
    
        /// <summary>First name.</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        /// <summary>Last name.</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        /// <summary>Contains all the suffixes and prefixes that can be appended to a name - Mr, Miss, Pr. - E.g. " Mr".</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>The name given at birth time and that may have changed after a marriage.</summary>
        [Newtonsoft.Json.JsonProperty("maidenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaidenName { get; set; }
    
        /// <summary>Middle name(s), for example "Lee" in "John Lee Smith".</summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MiddleName { get; set; }
    
        /// <summary>Name prefix (e.g. Doctor)</summary>
        [Newtonsoft.Json.JsonProperty("prefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prefix { get; set; }
    
        /// <summary>Name suffix (e.g. Junior, III, etc).</summary>
        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Suffix { get; set; }
    
        /// <summary>The method (if applicated) that was used to transform the name from universal character (e.g. korean characters) to latin characters/phonetic transcription/...</summary>
        [Newtonsoft.Json.JsonProperty("transliterationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransliterationMethod { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product 
    {
        [Newtonsoft.Json.JsonProperty("air", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Air Air { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hotel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Hotel Hotel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("moveMiscellaneous", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_MoveMisc MoveMiscellaneous { get; set; }
    
        [Newtonsoft.Json.JsonProperty("car", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Car Car { get; set; }
    
        [Newtonsoft.Json.JsonProperty("train", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Train Train { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_common 
    {
        [Newtonsoft.Json.JsonProperty("bkgChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BookingChannelType BkgChannel { get; set; }
    
        /// <summary>It is calculated automatically. If filled, the input will be discarded for the calculated value.</summary>
        [Newtonsoft.Json.JsonProperty("originSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OriginSystemType OriginSystem { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalSystemType ExternalSystem { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Creation Creation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Modification Modification { get; set; }
    
        [Newtonsoft.Json.JsonProperty("confirmation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Confirmation Confirmation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<Description> Descriptions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Creation 
    {
        /// <summary>creation date time with optional time offset in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTime { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Modification 
    {
        /// <summary>modification information with optional time offset in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTime { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Confirmation 
    {
        /// <summary>confirmation information with optional time offset</summary>
        [Newtonsoft.Json.JsonProperty("deadline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Deadline { get; set; }
    
    
    }
    
    /// <summary>air Reservation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Air : Product_common
    {
        /// <summary>Description or Free text</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(199, MinimumLength = 1)]
        public string Description { get; set; }
    
        /// <summary>Booking Class</summary>
        [Newtonsoft.Json.JsonProperty("bkgClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string BkgClass { get; set; }
    
        /// <summary>Status code (example HK, HX, HN, HL, TT ...)</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Number in party</summary>
        [Newtonsoft.Json.JsonProperty("NIP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NIP { get; set; }
    
        /// <summary>Airline alliance, group information</summary>
        [Newtonsoft.Json.JsonProperty("agreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60, MinimumLength = 1)]
        public string Agreement { get; set; }
    
        /// <summary>Rule number required by some providers to complete the booking</summary>
        [Newtonsoft.Json.JsonProperty("ruleNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuleNumber { get; set; }
    
        /// <summary>Confirmation number</summary>
        [Newtonsoft.Json.JsonProperty("confirmNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string ConfirmNbr { get; set; }
    
        /// <summary>Cancellation number</summary>
        [Newtonsoft.Json.JsonProperty("cancelNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string CancelNbr { get; set; }
    
        /// <summary>Enable to override status code (ex. for Offers)</summary>
        [Newtonsoft.Json.JsonProperty("overrideStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string OverrideStatus { get; set; }
    
        /// <summary>Freetext on twenty characters, sub-product of the MBO (Ex. For EC AIR &gt; international, domestic, european)</summary>
        [Newtonsoft.Json.JsonProperty("MBOProductCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string MBOProductCode { get; set; }
    
        /// <summary>marketing service provider information</summary>
        [Newtonsoft.Json.JsonProperty("serviceProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceProvider ServiceProvider { get; set; }
    
        /// <summary>identifier of the trip</summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifier Identifier { get; set; }
    
        /// <summary>operating information</summary>
        [Newtonsoft.Json.JsonProperty("partnerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartnerInfo PartnerInfo { get; set; }
    
        /// <summary>start point details</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Start Start { get; set; }
    
        /// <summary>end point details</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public End End { get; set; }
    
        [Newtonsoft.Json.JsonProperty("seats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Seats> Seats { get; set; }
    
        /// <summary>Vehicle details</summary>
        [Newtonsoft.Json.JsonProperty("vehicle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vehicle Vehicle { get; set; }
    
        /// <summary>Meal information</summary>
        [Newtonsoft.Json.JsonProperty("meal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meal Meal { get; set; }
    
        /// <summary>Duration of the trip</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        /// <summary>Distance of the trip</summary>
        [Newtonsoft.Json.JsonProperty("mileage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mileage Mileage { get; set; }
    
        /// <summary>Baggages information</summary>
        [Newtonsoft.Json.JsonProperty("baggages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public System.Collections.Generic.ICollection<Baggages> Baggages { get; set; }
    
        /// <summary>Check-in information</summary>
        [Newtonsoft.Json.JsonProperty("checkInEndTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CheckInEndTime { get; set; }
    
        /// <summary>Ticket information</summary>
        [Newtonsoft.Json.JsonProperty("ticket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ticket Ticket { get; set; }
    
        /// <summary>Category code of the cabin. F = First, C = Club (Business), W = Premium Economy, Y = Economy.</summary>
        [Newtonsoft.Json.JsonProperty("cabinClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength = 1)]
        public string CabinClass { get; set; }
    
        /// <summary>Route Id</summary>
        [Newtonsoft.Json.JsonProperty("routeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RouteId { get; set; }
    
    
    }
    
    /// <summary>marketing service provider information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Air_ServiceProvider 
    {
        /// <summary>The provider's profile reference</summary>
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string Ref { get; set; }
    
        /// <summary>Marketing Airline code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 2)]
        public string Code { get; set; }
    
        /// <summary>Provider name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string Name { get; set; }
    
        /// <summary>Link to the provider baggage policy</summary>
        [Newtonsoft.Json.JsonProperty("baggagePolicyLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaggagePolicyLink { get; set; }
    
        /// <summary>To-Do</summary>
        [Newtonsoft.Json.JsonProperty("isTLA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTLA { get; set; }
    
    
    }
    
    /// <summary>identifier of the trip</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Air_Identifier 
    {
        /// <summary>The flight number</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{1-4}")]
        public string Number { get; set; }
    
        /// <summary>Suffix of the flight number</summary>
        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string Suffix { get; set; }
    
    
    }
    
    /// <summary>hotel reservation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Hotel : Product_common
    {
        /// <summary>Description or Free text</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(199, MinimumLength = 1)]
        public string Description { get; set; }
    
        /// <summary>Room categories are U-Unknown, B-Budget , T-Standard, S-Superior, X-Deluxe, E-Executive, J-Junior Suite, D-Suite standard, I-Suite Deluxe. Temporary solution waiting to define Room as real elements linked to the ETR Hotel and Pax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bkgClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BkgClass { get; set; }
    
        /// <summary>Room type (U-Unknown, S-Single, D-Double, R-Triple, Y-Family Room).</summary>
        [Newtonsoft.Json.JsonProperty("accomodationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccomodationType { get; set; }
    
        /// <summary>Bed type.</summary>
        [Newtonsoft.Json.JsonProperty("bedType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BedType { get; set; }
    
        /// <summary>Number of beds.</summary>
        [Newtonsoft.Json.JsonProperty("bedNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BedNumber { get; set; }
    
        /// <summary>List amenities available in the property.</summary>
        [Newtonsoft.Json.JsonProperty("amenities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amenities { get; set; }
    
        /// <summary>Status code (example HK, HX, HN, HL, TT ...)</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Number in party</summary>
        [Newtonsoft.Json.JsonProperty("NIP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NIP { get; set; }
    
        /// <summary>This attribute indicates the additional services that have been requested by the Travel Agent. Additional services are services booked on top of the room (generally meal -breakfast, fullboard- or extra bed-crib, ...).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string AdditionalServices { get; set; }
    
        /// <summary>Cancellation policy.</summary>
        [Newtonsoft.Json.JsonProperty("cancelPolicies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string CancelPolicies { get; set; }
    
        /// <summary>Other rules.</summary>
        [Newtonsoft.Json.JsonProperty("otherRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string OtherRules { get; set; }
    
        /// <summary>Confirmation number</summary>
        [Newtonsoft.Json.JsonProperty("confirmNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string ConfirmNbr { get; set; }
    
        /// <summary>Cancellation number</summary>
        [Newtonsoft.Json.JsonProperty("cancelNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string CancelNbr { get; set; }
    
        /// <summary>Enable to override status code (ex. for Offers)</summary>
        [Newtonsoft.Json.JsonProperty("overrideStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string OverrideStatus { get; set; }
    
        /// <summary>Freetext on twenty characters, sub-product of the MBO (Ex. For EC AIR &gt; international, domestic, european)</summary>
        [Newtonsoft.Json.JsonProperty("MBOProductCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string MBOProductCode { get; set; }
    
        /// <summary>service provider information (Hotel Name, Property Code and Reference)</summary>
        [Newtonsoft.Json.JsonProperty("serviceProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceProvider2 ServiceProvider { get; set; }
    
        /// <summary>hotel Chain information</summary>
        [Newtonsoft.Json.JsonProperty("chain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Chain Chain { get; set; }
    
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public Start2 Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public End2 End { get; set; }
    
        /// <summary>Check-in time (indicates the expected time limit from when the guests can arrive at the property on check-in day) - 
        /// Only time is stored for Hotel in this attribute.
        /// Time respects ISO 8601 standard.  e.g. 13:22:00+01:00  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("checkInEndTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CheckInEndTime { get; set; }
    
        /// <summary>Check-out time (indicates the time limit when the guests should leave the property on check-out day) - Only time is stored for Hotel in this attribute.
        /// Time respects ISO 8601 standard.  e.g. 13:22:00+01:00 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("checkOutEndTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CheckOutEndTime { get; set; }
    
        /// <summary>description of the guests (number of adults, number of children by age)</summary>
        [Newtonsoft.Json.JsonProperty("customers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Customers Customers { get; set; }
    
        /// <summary>Dining option
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mealPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(99, MinimumLength = 1)]
        public string MealPlan { get; set; }
    
        /// <summary>guarantee information</summary>
        [Newtonsoft.Json.JsonProperty("guarantee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Guarantee Guarantee { get; set; }
    
        /// <summary>deposit information</summary>
        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Deposit Deposit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rate Rate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("codes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Codes> Codes { get; set; }
    
    
    }
    
    /// <summary>car Reservation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Car : Product_common
    {
        /// <summary>Description or Free text</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(99)]
        public string Description { get; set; }
    
        /// <summary>Status code (example HK, HX, HN, HL, TT ...)</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Number in party</summary>
        [Newtonsoft.Json.JsonProperty("NIP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NIP { get; set; }
    
        /// <summary>Confirmation number</summary>
        [Newtonsoft.Json.JsonProperty("confirmNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-20}")]
        public string ConfirmNbr { get; set; }
    
        /// <summary>Cancellation number</summary>
        [Newtonsoft.Json.JsonProperty("cancelNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-20}")]
        public string CancelNbr { get; set; }
    
        /// <summary>Enable to override status code (ex. for Offers)</summary>
        [Newtonsoft.Json.JsonProperty("overrideStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-2}")]
        public string OverrideStatus { get; set; }
    
        /// <summary>Freetext. Sub-product of the MBO (Ex. For EC AIR &gt; international, domestic, european)</summary>
        [Newtonsoft.Json.JsonProperty("MBOProductCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MBOProductCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Car_ServiceProvider ServiceProvider { get; set; }
    
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Car_Start Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Car_End End { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vehicle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Car_Vehicle Vehicle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Car_Conditions Conditions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("delivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Car_Delivery Delivery { get; set; }
    
        /// <summary>Used to convey collection information.</summary>
        [Newtonsoft.Json.JsonProperty("collection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Collection Collection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Car_Payment Payment { get; set; }
    
    
    }
    
    /// <summary>used to convey the pick-up information (pick-up date, time, location, ...) of the car booking</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Car_Start 
    {
        /// <summary>Pick-up date with optional time and time offset in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTime { get; set; }
    
        /// <summary>Used to specify a non airport Location Code for pick-up. This code should be unique to clearly identify the location.</summary>
        [Newtonsoft.Json.JsonProperty("providerLocationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-10}")]
        public string ProviderLocationCode { get; set; }
    
        /// <summary>Pickup location code, can be an IATA code ([IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx)), a provider location code (type=CPY) or an amadeus location code (type=AMA)</summary>
        [Newtonsoft.Json.JsonProperty("locationCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(3)]
        public System.Collections.Generic.ICollection<Product_Car_LocationCode> LocationCodes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Car_Contact Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("media", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relationship Media { get; set; }
    
    
    }
    
    /// <summary>used to convey the pick-up information (pick-up date, time, location, ...) of the car booking</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Car_End 
    {
        /// <summary>Drop-off date with optional time and time offset in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTime { get; set; }
    
        /// <summary>Used to specify a non airport Location Code for pick-up. This code should be unique to clearly identify the location.</summary>
        [Newtonsoft.Json.JsonProperty("providerLocationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-10}")]
        public string ProviderLocationCode { get; set; }
    
        /// <summary>Drop-off location code, can be an IATA code ([IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx)), a provider location code (type=CPY) or an amadeus location code (type=AMA)</summary>
        [Newtonsoft.Json.JsonProperty("locationCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(3)]
        public System.Collections.Generic.ICollection<Product_Car_LocationCode> LocationCodes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Car_Contact Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("media", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relationship Media { get; set; }
    
    
    }
    
    /// <summary>car provider information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Car_ServiceProvider 
    {
        /// <summary>The provider's profile reference.</summary>
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9a-zA-Z]{1-6}")]
        public string Ref { get; set; }
    
        /// <summary>Car rental compay name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string Name { get; set; }
    
        /// <summary>Car rental company code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9a-zA-Z]{2-3}")]
        public string Code { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Car_Conditions 
    {
        /// <summary>used to convey all information about the rate</summary>
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rate2 Rate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mileageLimitation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MileageLimitation MileageLimitation { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Car_LocationCode 
    {
        /// <summary>Train Station code, can be UIC code (with type=UIC or other value) or closest IATA code (with no type)</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9a-zA-Z]{3-7}")]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9a-zA-Z]{1-4}")]
        public string Type { get; set; }
    
    
    }
    
    /// <summary>used to convey delivery information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Car_Delivery 
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Car_Contact Contact { get; set; }
    
    
    }
    
    /// <summary>information on the vehicle booked</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Car_Vehicle 
    {
        /// <summary>The ACRISS Code defining the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{4}")]
        public string Code { get; set; }
    
        /// <summary>Description of the vehicle booked</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1-70}")]
        public string Description { get; set; }
    
        /// <summary>Used to convey information about special equipments (GPS, Baby seat, ...) associated to the car booking.</summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(99)]
        public System.Collections.Generic.ICollection<Options> Options { get; set; }
    
        [Newtonsoft.Json.JsonProperty("numberOfDoors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfDoors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Car_Contact 
    {
        /// <summary>pick-up location phone information</summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-20}")]
        public string Phone { get; set; }
    
    
    }
    
    /// <summary>used to convey payment information (including details of voucher indicating prepayment)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Car_Payment 
    {
        /// <summary>Details of voucher information indicating prepayment.</summary>
        [Newtonsoft.Json.JsonProperty("voucher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Voucher Voucher { get; set; }
    
    
    }
    
    /// <summary>train reservation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Train : Product_common
    {
        /// <summary>Description or Free text</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(199)]
        public string Description { get; set; }
    
        /// <summary>Booking class</summary>
        [Newtonsoft.Json.JsonProperty("bkgClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-2}")]
        public string BkgClass { get; set; }
    
        /// <summary>Status code (example HK, HX, HN, HL, TT ...)</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Number in party</summary>
        [Newtonsoft.Json.JsonProperty("NIP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NIP { get; set; }
    
        /// <summary>Confirmation number</summary>
        [Newtonsoft.Json.JsonProperty("confirmNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-20}")]
        public string ConfirmNbr { get; set; }
    
        /// <summary>Cancellation number</summary>
        [Newtonsoft.Json.JsonProperty("cancelNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-20}")]
        public string CancelNbr { get; set; }
    
        /// <summary>Enable to override status code (ex. for Offers)</summary>
        [Newtonsoft.Json.JsonProperty("overrideStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-2}")]
        public string OverrideStatus { get; set; }
    
        /// <summary>Freetext. Sub-product of the MBO (Ex. For EC AIR &gt; international, domestic, european)</summary>
        [Newtonsoft.Json.JsonProperty("MBOProductCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1-20}")]
        public string MBOProductCode { get; set; }
    
        /// <summary>rail provider information</summary>
        [Newtonsoft.Json.JsonProperty("serviceProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceProvider3 ServiceProvider { get; set; }
    
        /// <summary>Train number</summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-6}")]
        public string Identifier { get; set; }
    
        /// <summary>used to convey the pick-up information (pick-up date, time, location, ...) of the car booking</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Start3 Start { get; set; }
    
        /// <summary>used to convey the pick-up information (pick-up date, time, location, ...) of the car booking</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public End3 End { get; set; }
    
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vehicle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vehicle2 Vehicle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mileage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mileage2 Mileage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("collectionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CollectionReference CollectionReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ticket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ticket2 Ticket { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_Train_Location 
    {
        /// <summary>Train Station code, can be UIC code (with type=UIC or other value) or closest IATA code (with no type)</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9a-zA-Z]{3-7}")]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9a-zA-Z]{1-4}")]
        public string Type { get; set; }
    
        /// <summary>Name of the departure point</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string Name { get; set; }
    
    
    }
    
    /// <summary>moveMiscellaneous Reservation is used to convey information about transportation services from the passenger's home to the airport for example, or from the hotel to the train station  
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Product_MoveMisc : Product_common
    {
        /// <summary>Description or Free text</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(199, MinimumLength = 1)]
        public string Description { get; set; }
    
        /// <summary>Move miscellaneous title</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(99, MinimumLength = 1)]
        public string Name { get; set; }
    
        /// <summary>Status code (example HK, HX, HN, HL, TT ...)</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Number in party</summary>
        [Newtonsoft.Json.JsonProperty("NIP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NIP { get; set; }
    
        /// <summary>Confirmation number</summary>
        [Newtonsoft.Json.JsonProperty("confirmNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string ConfirmNbr { get; set; }
    
        /// <summary>Cancellation number</summary>
        [Newtonsoft.Json.JsonProperty("cancelNbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string CancelNbr { get; set; }
    
        /// <summary>Enable to override status code (ex. for Offers)</summary>
        [Newtonsoft.Json.JsonProperty("overrideStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-2}")]
        public string OverrideStatus { get; set; }
    
        /// <summary>Freetext on twenty characters, sub-product of the MBO (Ex. For EC AIR &gt; international, domestic, european)</summary>
        [Newtonsoft.Json.JsonProperty("MBOProductCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string MBOProductCode { get; set; }
    
        /// <summary>marketing service provider information</summary>
        [Newtonsoft.Json.JsonProperty("serviceProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceProvider4 ServiceProvider { get; set; }
    
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Start4 Start { get; set; }
    
        /// <summary>end point details</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public End4 End { get; set; }
    
        /// <summary>vehicle details</summary>
        [Newtonsoft.Json.JsonProperty("vehicle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vehicle3 Vehicle { get; set; }
    
        /// <summary>distance of the trip</summary>
        [Newtonsoft.Json.JsonProperty("mileage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mileage3 Mileage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("baggage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Baggage Baggage { get; set; }
    
        /// <summary>Check-in deadline time. Only time stored for now.</summary>
        [Newtonsoft.Json.JsonProperty("checkInEndTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CheckInEndTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ticket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ticket3 Ticket { get; set; }
    
    
    }
    
    /// <summary>information of the booking channel</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BookingChannelType 
    {
        /// <summary>Refer to the OTA Booking Channel Type (BCT) codeset list.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BookingChannelTypeCode? Code { get; set; }
    
        /// <summary>Booking channel description.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-35}")]
        public string Description { get; set; }
    
    
    }
    
    /// <summary>information of the originator system</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OriginSystemType 
    {
        /// <summary>Type of the origin system. TripConcierge Manual, Amadeus Integrated Partner, AeTM Web, AeTM Mobile, ePower, eRetail, Sell Classic, Sell Connect, Cros-Sell Notifier, TOMA, IRIS, Other</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OriginSystemTypeType? Type { get; set; }
    
        /// <summary>Description of the origin system (notably in case of Other)</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-99}")]
        public string Description { get; set; }
    
    
    }
    
    /// <summary>information of external system involved</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ExternalSystemType 
    {
        [Newtonsoft.Json.JsonProperty("creation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creation2 Creation { get; set; }
    
        /// <summary>The reference of the booking</summary>
        [Newtonsoft.Json.JsonProperty("bkgReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<BkgReferences> BkgReferences { get; set; }
    
    
    }
    
    /// <summary>address information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Address 
    {
        /// <summary>Category of the contact element</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AddressCategory? Category { get; set; }
    
        /// <summary>Line 1 = Street address, Line 2 = Apartment, suite, unit, building, floor, etc</summary>
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Lines { get; set; }
    
        /// <summary>Example: 74130</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>country code [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{2}")]
        public string CountryCode { get; set; }
    
        /// <summary>Full city name. Example: Dublin</summary>
        [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z -]{1,35}")]
        public string CityName { get; set; }
    
        /// <summary>State code - two character standard [ISO 3166-2 state code](https://en.wikipedia.org/wiki/ISO_3166-2)</summary>
        [Newtonsoft.Json.JsonProperty("stateCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1,2}")]
        public string StateCode { get; set; }
    
        /// <summary>Full state name</summary>
        [Newtonsoft.Json.JsonProperty("stateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateName { get; set; }
    
        /// <summary>E.g. BP 220</summary>
        [Newtonsoft.Json.JsonProperty("postalBox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalBox { get; set; }
    
        /// <summary>Field containing a full unformatted address. Only applicable when the fields lines, postalCode, countryCode, cityName are not filled.</summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }
    
    
    }
    
    /// <summary>email information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Email 
    {
        /// <summary>Category of the contact element</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailCategory? Category { get; set; }
    
        /// <summary>Email address (e.g. john@smith.com)</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
    
    }
    
    /// <summary>phone information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Phone 
    {
        /// <summary>Category of the contact element</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhoneCategory? Category { get; set; }
    
        /// <summary>Adressee name (e.g. in case of emergency purpose it corresponds to name of the person to be contacted).</summary>
        [Newtonsoft.Json.JsonProperty("addresseeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z -]")]
        public string AddresseeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deviceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhoneDeviceType? DeviceType { get; set; }
    
        /// <summary>Country code of the country (ISO3166-1). E.g. "US" for the United States</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2}")]
        public string CountryCode { get; set; }
    
        /// <summary>Country calling code of the phone number, as defined by the International Communication Union. Examples - "1" for US, "371" for Latvia.</summary>
        [Newtonsoft.Json.JsonProperty("countryCallingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9+]{2,5}")]
        public string CountryCallingCode { get; set; }
    
        /// <summary>Corresponds to a regional code or a city code. The length of the field varies depending on the area.</summary>
        [Newtonsoft.Json.JsonProperty("areaCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{1,4}")]
        public string AreaCode { get; set; }
    
        /// <summary>Phone number. Composed of digits only. The number of digits depends on the country.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{1,15}")]
        public string Number { get; set; }
    
        /// <summary>Extension of the phone</summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }
    
        /// <summary>String containing the full phone number - applicable only when a structured phone (i.e. countryCallingCode + number) is not provided</summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }
    
    
    }
    
    /// <summary>Type of the device (Landline, Mobile or Fax)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum PhoneDeviceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MOBILE")]
        MOBILE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LANDLINE")]
        LANDLINE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAX")]
        FAX = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Description 
    {
        [Newtonsoft.Json.JsonProperty("texts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(50)]
        public System.Collections.Generic.ICollection<Texts> Texts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("medias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(50)]
        public System.Collections.Generic.ICollection<Medias> Medias { get; set; }
    
    
    }
    
    /// <summary>details on the travel agency owning the trip</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TravelAgency 
    {
        /// <summary>Office name of the travel agency</summary>
        [Newtonsoft.Json.JsonProperty("officeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficeName { get; set; }
    
        /// <summary>Phone number of the travel agency</summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Phone Phone { get; set; }
    
        /// <summary>Email of the travel agency</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Email Email { get; set; }
    
        /// <summary>adress of the travel agency</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
    
    }
    
    /// <summary>trip point information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TripPoint 
    {
        /// <summary>Date of the trip point optional time and time offset in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTime { get; set; }
    
        /// <summary>Name of the point city</summary>
        [Newtonsoft.Json.JsonProperty("locationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string LocationName { get; set; }
    
        /// <summary>Point Trip Location [IATA code](https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code)</summary>
        [Newtonsoft.Json.JsonProperty("locationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string LocationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Body_TripParserJob 
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public TripParserJob_in Data { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Success_TripParserJob 
    {
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Issue> Warnings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public TripParserJob_out Data { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Success_TripParserJob2 
    {
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Issue> Warnings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public TripParserJob_out Data { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Success_Result 
    {
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Issue> Warnings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public AggregatedTrip Data { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TripParserJob_outStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"STARTED")]
        STARTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Source 
    {
        /// <summary>a JSON Pointer [RFC6901] to the associated entity in the request document</summary>
        [Newtonsoft.Json.JsonProperty("pointer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pointer { get; set; }
    
        /// <summary>a string indicating which URI query parameter caused the issue</summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }
    
        /// <summary>a string indicating an example of the right value</summary>
        [Newtonsoft.Json.JsonProperty("example", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Example { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Methods
    {
        [System.Runtime.Serialization.EnumMember(Value = @"GET")]
        GET = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PUT")]
        PUT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"POST")]
        POST = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PATCH")]
        PATCH = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Methods2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"GET")]
        GET = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PUT")]
        PUT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"POST")]
        POST = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PATCH")]
        PATCH = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Itinerary 
    {
        /// <summary>Date of the stop with optional time and time offset in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTime { get; set; }
    
        /// <summary>Name of the stop city</summary>
        [Newtonsoft.Json.JsonProperty("locationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string LocationName { get; set; }
    
        /// <summary>duration of the stop</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        /// <summary>Stop Location [IATA code](https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code)</summary>
        [Newtonsoft.Json.JsonProperty("locationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
        public string LocationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Roles
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TRAVELLER")]
        TRAVELLER = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ServiceProvider 
    {
        /// <summary>The provider's profile reference</summary>
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string Ref { get; set; }
    
        /// <summary>Marketing Airline code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 2)]
        public string Code { get; set; }
    
        /// <summary>Provider name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string Name { get; set; }
    
        /// <summary>Link to the provider baggage policy</summary>
        [Newtonsoft.Json.JsonProperty("baggagePolicyLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaggagePolicyLink { get; set; }
    
        /// <summary>To-Do</summary>
        [Newtonsoft.Json.JsonProperty("isTLA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTLA { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Identifier 
    {
        /// <summary>The flight number</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{1-4}")]
        public string Number { get; set; }
    
        /// <summary>Suffix of the flight number</summary>
        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string Suffix { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PartnerInfo 
    {
        [Newtonsoft.Json.JsonProperty("serviceProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Air_ServiceProvider ServiceProvider { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Air_Identifier Identifier { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Start 
    {
        /// <summary>Departure date with optional time and time offset in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateTime { get; set; }
    
        /// <summary>Departure terminal</summary>
        [Newtonsoft.Json.JsonProperty("terminal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string Terminal { get; set; }
    
        /// <summary>Name of the departure city</summary>
        [Newtonsoft.Json.JsonProperty("locationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60, MinimumLength = 1)]
        public string LocationName { get; set; }
    
        /// <summary>Name of the departure Airport</summary>
        [Newtonsoft.Json.JsonProperty("airportName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60, MinimumLength = 1)]
        public string AirportName { get; set; }
    
        /// <summary>Code of the departure city</summary>
        [Newtonsoft.Json.JsonProperty("cityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60, MinimumLength = 1)]
        public string CityCode { get; set; }
    
        /// <summary>Code of the departure country</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60, MinimumLength = 1)]
        public string CountryCode { get; set; }
    
        /// <summary>[IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx) of the departure location</summary>
        [Newtonsoft.Json.JsonProperty("locationCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{3}")]
        public string LocationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("media", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relationship Media { get; set; }
    
        [Newtonsoft.Json.JsonProperty("regionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegionCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class End 
    {
        /// <summary>End date with optional time and time offset in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTime { get; set; }
    
        /// <summary>Arrival terminal</summary>
        [Newtonsoft.Json.JsonProperty("terminal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string Terminal { get; set; }
    
        /// <summary>Name of the arrival city</summary>
        [Newtonsoft.Json.JsonProperty("locationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60, MinimumLength = 1)]
        public string LocationName { get; set; }
    
        /// <summary>Name of the arrival Airport</summary>
        [Newtonsoft.Json.JsonProperty("airportName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60, MinimumLength = 1)]
        public string AirportName { get; set; }
    
        /// <summary>Indicator to define if a visa is needed for the arrival country (True) or not (False)</summary>
        [Newtonsoft.Json.JsonProperty("visaAlert", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VisaAlert { get; set; }
    
        /// <summary>Code of the arrival city</summary>
        [Newtonsoft.Json.JsonProperty("cityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60, MinimumLength = 1)]
        public string CityCode { get; set; }
    
        /// <summary>Code of the arrival country</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60, MinimumLength = 1)]
        public string CountryCode { get; set; }
    
        /// <summary>[IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx) of the arrival location</summary>
        [Newtonsoft.Json.JsonProperty("locationCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{3}")]
        public string LocationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("media", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relationship Media { get; set; }
    
    
    }
    
    /// <summary>Seat details</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Seats 
    {
        /// <summary>Status code (example HK, HX, HN, NO ...)</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceProvider5 ServiceProvider { get; set; }
    
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Start5 Start { get; set; } = new Start5();
    
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public End5 End { get; set; } = new End5();
    
        /// <summary>Seat number</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stakeholder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relationship Stakeholder { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Vehicle 
    {
        /// <summary>The equipment code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
        public string Code { get; set; }
    
        /// <summary>The equipment description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Description { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Meal 
    {
        /// <summary>Code of the meal served on board</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Description of the meal served on board</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(199, MinimumLength = 1)]
        public string Description { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Mileage 
    {
        /// <summary>Distance of the trip</summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Distance { get; set; }
    
        /// <summary>Unit of distance, in kilometers (KM) or miles (MI)</summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MileageUnit? Unit { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Baggages 
    {
        /// <summary>Baggage allowance</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }
    
        /// <summary>Pieces or kilograms</summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(99, MinimumLength = 1)]
        public string Unit { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Ticket 
    {
        /// <summary>Ticket number</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string Number { get; set; }
    
        /// <summary>Ticket issuance date</summary>
        [Newtonsoft.Json.JsonProperty("issuanceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssuanceDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ServiceProvider2 
    {
        /// <summary>The provider's profile reference</summary>
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 1)]
        public string Ref { get; set; }
    
        /// <summary>Provider name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; }
    
        /// <summary>Provider code.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string Code { get; set; }
    
        /// <summary>External profile reference for imported profiles.</summary>
        [Newtonsoft.Json.JsonProperty("externalRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        public string ExternalRef { get; set; }
    
        /// <summary>Type of provider (GDS, CRS, Multisource).</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceProvider2Source? Source { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Chain 
    {
        /// <summary>Hotel Chain's profile reference</summary>
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 1)]
        public string Ref { get; set; }
    
        /// <summary>Hotel Chain name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; }
    
        /// <summary>Hotel Chain code.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string Code { get; set; }
    
        /// <summary>External profile reference for imported profiles.</summary>
        [Newtonsoft.Json.JsonProperty("externalRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        public string ExternalRef { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Start2 
    {
        /// <summary>check-in date (service date) in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, e.g. 2017-02-10T20:40:00+02:00 - Only date is stored for Hotel in this attribute</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateTime { get; set; }
    
        /// <summary>Location (city) code</summary>
        [Newtonsoft.Json.JsonProperty("locationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{3}")]
        public string LocationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("media", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relationship Media { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class End2 
    {
        /// <summary>check-out date (service date) in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, e.g. 2017-02-10T20:40:00+02:00 - Only date is stored for Hotel in this attribute</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DateTime { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Customers 
    {
        /// <summary>Number of adults.</summary>
        [Newtonsoft.Json.JsonProperty("adults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Adults { get; set; }
    
        /// <summary>Number of children (with the age in attribute).</summary>
        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(9)]
        public System.Collections.Generic.ICollection<Children> Children { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Guarantee 
    {
        /// <summary>Form of Payment to guarantee the booking. Authorized forms of payment for Guarantee are 1-Credit Card, 10-Travel Agent identification, ID-Customer ID, 6-Check, 4-MCO, 12-Company Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentForm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GuaranteePaymentForm? PaymentForm { get; set; }
    
        /// <summary>Payment details</summary>
        [Newtonsoft.Json.JsonProperty("paymentDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(31, MinimumLength = 1)]
        public string PaymentDetails { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Deposit 
    {
        /// <summary>The code specifying a monetary unit. Use ISO 4217, three alpha code.</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-3}")]
        public string CurrencyCode { get; set; }
    
        /// <summary>Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }
    
        /// <summary>Defines the amount without decimal separator (i.e. Amount=8500 and DecimalPlace=2 represent 85.00).</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Amount { get; set; }
    
        /// <summary>Defines the price, e.g. for base fare, total...</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Used only in case the other codes are not suitable, e.g. T01 when Price is an Airline Fees.</summary>
        [Newtonsoft.Json.JsonProperty("IDCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IDCode { get; set; }
    
        /// <summary>Describes more precisely a Price (or Tax), e.g. "Issuance Fee for Credit Card" when Price is an Airline Fees.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Form of Payment to guarantee the booking. Authorized forms of payment for Guarantee are 1-Credit Card, 10-Travel Agent identification, ID-Customer ID, 6-Check, 4-MCO, 12-Company Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentForm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DepositPaymentForm? PaymentForm { get; set; }
    
        /// <summary>Payment details</summary>
        [Newtonsoft.Json.JsonProperty("paymentDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(31, MinimumLength = 1)]
        public string PaymentDetails { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Rate 
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inclusions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Inclusions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Codes 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Collection 
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Car_Contact Contact { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Rate2 
    {
        /// <summary>The RateCategory attribute defines a set of valid values for the category of a rate. Typically rates are offered as either Leisure rates or Business (Corporate) rates, with a business rate usually including additional costs such as the cost of insurance, etc.  This set of values defines the rate categories.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Rate2Category? Category { get; set; }
    
        /// <summary>Car rental company's code for the rate.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-6}")]
        public string Code { get; set; }
    
        /// <summary>Rate code description.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-70}")]
        public string Description { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class MileageLimitation 
    {
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Distance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MileageLimitationUnit? Unit { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Options 
    {
        /// <summary>Equipment code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{4}")]
        public string Code { get; set; }
    
        /// <summary>Equipment description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1-70}")]
        public string Description { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Voucher 
    {
        /// <summary>Indicates what part of the amount the Voucher covers. (e.g. Full credit, partial credit)</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1-70}")]
        public string Type { get; set; }
    
        /// <summary>Indicates the amount covered in case of partial credit voucher.</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Amount { get; set; }
    
        /// <summary>Indicates the currency in case of partial credit voucher.</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-3}")]
        public string Currency { get; set; }
    
        /// <summary>Indicates the decimal place in case of partial credit voucher.</summary>
        [Newtonsoft.Json.JsonProperty("decimalPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlace { get; set; }
    
        /// <summary>Reference number of the Billing Account that will be charged for the payment.</summary>
        [Newtonsoft.Json.JsonProperty("billingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-25}")]
        public string BillingNumber { get; set; }
    
        /// <summary>Unique Identifier created by the Car rental provider to identify this voucher.</summary>
        [Newtonsoft.Json.JsonProperty("providerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-20}")]
        public string ProviderReference { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ServiceProvider3 
    {
        /// <summary>The provider's profile reference.</summary>
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9a-zA-Z]{1-6}")]
        public string Ref { get; set; }
    
        /// <summary>Provider name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string Name { get; set; }
    
        /// <summary>Provider code.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9a-zA-Z]{1-35}")]
        public string Code { get; set; }
    
        /// <summary>External profile reference for imported profiles.</summary>
        [Newtonsoft.Json.JsonProperty("externalRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9a-zA-Z]{1-10}")]
        public string ExternalRef { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Start3 
    {
        /// <summary>Departure date (Service date) with optional time and time offset in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Train_Location Location { get; set; }
    
        /// <summary>Reference of the departure platform</summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Platform { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class End3 
    {
        /// <summary>Arrival date with optional time and time offset in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product_Train_Location Location { get; set; }
    
        /// <summary>Reference of the arrival platform</summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Platform { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Vehicle2 
    {
        /// <summary>Equipment code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-3}")]
        public string Code { get; set; }
    
        /// <summary>Equipment description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string Description { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Mileage2 
    {
        /// <summary>Distance of the trip</summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Distance { get; set; }
    
        /// <summary>Unit of distance, in kilometers (KM) or miles (MI)</summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Mileage2Unit? Unit { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CollectionReference 
    {
        /// <summary>collection reference number</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-70}")]
        public string Number { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Ticket2 
    {
        /// <summary>Ticket number</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-20}")]
        public string Number { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ServiceProvider4 
    {
        /// <summary>The provider's profile reference.</summary>
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 1)]
        public string Ref { get; set; }
    
        /// <summary>Provider name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; }
    
        /// <summary>Provider code.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string Code { get; set; }
    
        /// <summary>External profile reference for imported profiles.</summary>
        [Newtonsoft.Json.JsonProperty("externalRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        public string ExternalRef { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Start4 
    {
        /// <summary>Departure date (Service date) with optional time and time offset in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateTime { get; set; }
    
        /// <summary>Departure terminal</summary>
        [Newtonsoft.Json.JsonProperty("terminal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string Terminal { get; set; }
    
        /// <summary>[IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx) of the departure location</summary>
        [Newtonsoft.Json.JsonProperty("locationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{3}")]
        public string LocationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("media", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relationship Media { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class End4 
    {
        /// <summary>Arrival date with optional time and time offset in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, e.g. 2017-02-10T20:40:00+02:00</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTime { get; set; }
    
        /// <summary>Arrival terminal</summary>
        [Newtonsoft.Json.JsonProperty("terminal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string Terminal { get; set; }
    
        /// <summary>[IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx) of the arrival location</summary>
        [Newtonsoft.Json.JsonProperty("locationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{3}")]
        public string LocationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("media", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relationship Media { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Vehicle3 
    {
        /// <summary>Vehicle code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
        public string Code { get; set; }
    
        /// <summary>Vehicle description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Description { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Mileage3 
    {
        /// <summary>Distance of the trip</summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Distance { get; set; }
    
        /// <summary>Unit of distance, in kilometers (KM) or miles (MI)</summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Mileage3Unit? Unit { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Baggage 
    {
        /// <summary>baggage allowance</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Ticket3 
    {
        /// <summary>Ticket number</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string Number { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum BookingChannelTypeCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"EMA")]
        EMA = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAX")]
        FAX = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"N1A")]
        N1A = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTH")]
        OTH = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PHO")]
        PHO = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WEB")]
        WEB = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"B2B")]
        B2B = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum OriginSystemTypeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TRIPCONCIERGE MANUAL")]
        TRIPCONCIERGE_MANUAL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AMADEUS INTEGRATED PARTNER")]
        AMADEUS_INTEGRATED_PARTNER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AETM WEB")]
        AETM_WEB = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AETM MOBILE")]
        AETM_MOBILE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPOWER")]
        EPOWER = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERETAIL")]
        ERETAIL = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SELL CLASSIC")]
        SELL_CLASSIC = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SELL CONNECT")]
        SELL_CONNECT = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSS-SELL NOTIFIER")]
        CROSSSELL_NOTIFIER = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOMA")]
        TOMA = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IRIS")]
        IRIS = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"B2W")]
        B2W = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 12,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Creation2 
    {
        /// <summary>Booking date in the external system with optional time and time offset</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTime { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BkgReferences 
    {
        /// <summary>Owner of the booking</summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-10}")]
        public string Owner { get; set; }
    
        /// <summary>Reference number of the booking</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{1-19}")]
        public string Number { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum AddressCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL")]
        PERSONAL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum EmailCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL")]
        PERSONAL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum PhoneCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL")]
        PERSONAL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Texts 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        /// <summary>text type i.e. html, shortDescription</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Medias 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>media type</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MediasEncoding? Encoding { get; set; }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }
    
        [Newtonsoft.Json.JsonProperty("src", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Src { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9a-z-A-Z]{1-10}")]
        public string ID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ServiceProvider5 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string Code { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Start5 
    {
        /// <summary>[IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx) of the departure location</summary>
        [Newtonsoft.Json.JsonProperty("locationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{3}")]
        public string LocationCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class End5 
    {
        /// <summary>[IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx) of the arrival location</summary>
        [Newtonsoft.Json.JsonProperty("locationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{3}")]
        public string LocationCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum MileageUnit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MI")]
        MI = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ServiceProvider2Source
    {
        [System.Runtime.Serialization.EnumMember(Value = @"GDS")]
        GDS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CRS")]
        CRS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MULTISOURCE")]
        MULTISOURCE = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Contact 
    {
        /// <summary>pick-up location phone information</summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string Phone { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Children 
    {
        /// <summary>Number of children</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number { get; set; }
    
        /// <summary>Age of children</summary>
        [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Age { get; set; }
    
        /// <summary>Age code (specific to hotel property)</summary>
        [Newtonsoft.Json.JsonProperty("ageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
        public string AgeCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum GuaranteePaymentForm
    {
        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"10")]
        _10 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"6")]
        _6 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"4")]
        _4 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"12")]
        _12 = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum DepositPaymentForm
    {
        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"10")]
        _10 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"6")]
        _6 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"4")]
        _4 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"12")]
        _12 = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Rate2Category
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ASSOCIATION")]
        ASSOCIATION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONVENTION")]
        CONVENTION = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSORTIUM")]
        CONSORTIUM = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CORPORATE")]
        CORPORATE = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CREDENTIAL")]
        CREDENTIAL = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL")]
        GENERAL = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GOVERNMENT")]
        GOVERNMENT = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INCLUSIVE")]
        INCLUSIVE = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INDUSTRY")]
        INDUSTRY = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LEISURE - PACKAGE")]
        LEISURE__PACKAGE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum MileageLimitationUnit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ML")]
        ML = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Mileage2Unit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MI")]
        MI = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Mileage3Unit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MI")]
        MI = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum MediasEncoding
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TXT")]
        TXT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOC")]
        DOC = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GIF")]
        GIF = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PNG")]
        PNG = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
        PDF = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JPG")]
        JPG = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JPEG")]
        JPEG = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v12.0.0.2)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108